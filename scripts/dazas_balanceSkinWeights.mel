// Balance the skin weights on the left and right sides.
/*
Balance parameter controls the intensity of the balance.
The reassigned weight value is the sum of the vertex's skin weights in the left and right Influences.
The weights of the vertex in the other Influences will not be affected.
The parameter varies from -1 to 1.
In Relative mode,
the value 0 does not change the weight value.
A positive value causes the left and right weights to tend to be equally distributed.
A value of 1 will distribute the left and right weights completely equally.
Negative values lead to a more uneven distribution of weights between the left and right sides.
A value of -1 will result in a maximum weight on one side and a weight of 0 on the other side.
If the left and right weights are already perfectly even, the relative mode will not play any role.
In Absolutely mode,
A value -1 causes the weight of the vertex to be completely biased towards the influences on one side
and the weight of the influences on the other side to be 0.
The direction of the weight bias is determined by the location of the vertex.
A value 1 causes the weights of the vertices to be distributed completely equally to the influences on both sides.
In the distance mode,
the Balance parameter value will be ignored.
the assignment of weights will be determined by the distance from the vertex to the Influences on both sides in the x-axis direction.
The weight of the vertices located right in the middle of the Influences on the left and right sides in the x-axis direction will be equally distributed.
The weights of the vertices located between the left and right Influences,
but at unequal distances from each side of the Influences,
will be determined by the ratio of the distance from the vertex to one side of the Influences to the distance between the two sides of the Influences in the x-axis direction.
If the vertex is located outside the left and right Influences in the x-axis direction,
the weight of the vertex will be assigned to the left or right Influence in its entirety,
depending on the location of the vertex in the x-axis direction.
The weight of the other side Influence will be 0.

The data is a set of global array variables.
In absolute and relative modes, data is used to remember the initial values of vertex weights.
If the data parameter is 'rebuild' or parameter is 'use' but the data global array variables is empty,
the weight of the current vertex is used as the initial value and is entered into the global array variables of the data.

The Max Distance parameter will determine the intensity of the balancing effect.
The balancing effect of the vertex weights will gradually decay in its distance from the origin to the maximum distance in the x-axis direction.
Vertices that exceed the maximum distance in the x-axis direction will not be balanced.

The Ignore Weight parameter determines the minimum sum of left and right weights value that needs to be balanced for processing.
The vertices on the left and right Influences with a sum of weights less than this parameter are ignored.

Example:
dazas_balanceSkinWeights(
    {"Body.vtx[9885]","Body.vtx[9871]","Body.vtx[9867]","Body.vtx[8468]"}, // Vertices
    {"NoseSideJoint_R", "NostrilJoint_R", "NoseCornerJoint_R"}, // Influences
    "dis", // 'Relative','rel' or 'Absolutely','abs' or 'Distance','dis'
    "use", // 'use', 'directlyUse' or 'build'
    0.5,  // Balance Value
    1.5, // Max Distance
    1.0, // Exponential of Attenuation
    0.05, // Below this value will be ignored
    0);
*/
global string $gDazasSkinBalskinCluster;
global string $gDazasSkinBalVtxs[];
global string $gDazasSkinBalInfsL[];
global float $gDazasSkinBalWeightsL[];
global float $gDazasSkinBalInfXPosL[];
global string $gDazasSkinBalInfsR[];
global float $gDazasSkinBalWeightsR[];
global float $gDazasSkinBalInfXPosR[];
global string $gDazasSkinBalInfsSmaller[];
global float $gDazasSkinBalWeightsSmaller[];
global string $gDazasSkinBalInfsLarger[];
global float $gDazasSkinBalWeightsLarger[];
global float $gDazasSkinBalIntensity[];
global float $gDazasSkinBalXDis[];
global float $gDazasSkinBalMaxDis;
global float $gDazasSkinBalAtten;

// Check whether the data is correct or not.
global proc int dazas_skinBal_checkData (string $vtxs[], string $infsL[], string $infsR[])
{
  global string $gDazasSkinBalskinCluster;

  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];

  global float $gDazasSkinBalInfXPosL[];
  global float $gDazasSkinBalInfXPosR[];

  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];

  global float $gDazasSkinBalIntensity[];
  global float $gDazasSkinBalXDis[];
  global float $gDazasSkinBalMaxDis;
  global float $gDazasSkinBalAtten;

  int $vtxsSize_g = size($gDazasSkinBalVtxs);
  int $infsSizeL_g = size($gDazasSkinBalInfsL);
  int $weightsSizeL_g = size($gDazasSkinBalWeightsL);
  int $infsSizeR_g = size($gDazasSkinBalInfsR);
  int $weightsSizeR_g = size($gDazasSkinBalWeightsR);

  int $infXDisSizeL_g = size($gDazasSkinBalInfXPosL);
  int $infXDisSizeR_g = size($gDazasSkinBalInfXPosR);

  int $infsSmallerSize_g = size($gDazasSkinBalInfsSmaller);
  int $weightsSmallerSize_g = size($gDazasSkinBalWeightsSmaller);
  int $infsLargerSize_g = size($gDazasSkinBalInfsLarger);
  int $weightsLargerSize_g = size($gDazasSkinBalWeightsLarger);

  int $intensitySize_g = size($gDazasSkinBalIntensity);
  int $xDisSize_g = size($gDazasSkinBalXDis);

  int $vtxsSize = size($vtxs);
  int $infsSizeL = size($infsL);
  int $infsSizeR = size($infsR);

  int $result = ($vtxsSize_g != 0 &&
            $vtxsSize_g == $infsSizeL_g &&
            $infsSizeL_g == $weightsSizeL_g &&
            $weightsSizeL_g == $infsSizeR_g &&
            $infsSizeR_g == $weightsSizeR_g &&
            $weightsSizeR_g == $infXDisSizeL_g &&
            $infXDisSizeL_g == $infXDisSizeR_g &&
            $infXDisSizeR_g == $infsSmallerSize_g &&
            $infsSmallerSize_g == $weightsSmallerSize_g &&
            $weightsSmallerSize_g == $infsLargerSize_g &&
            $infsLargerSize_g == $weightsLargerSize_g &&
            $weightsLargerSize_g == $intensitySize_g &&
            $intensitySize_g == $xDisSize_g);
  if (!$result)
    return 0; //"Data is empty or data is corrupt.";
  else if ($vtxsSize > 0)
  {
    $result = objExists($gDazasSkinBalskinCluster);
    if (!$result)
      return 2; //"The Skin Cluster does not exist.";

    $result = ($vtxsSize_g == $vtxsSize &&
              $vtxsSize == $infsSizeL &&
              $infsSizeL == $infsSizeR);
    if (!$result)
      return 3; //"The data does not match the currently entered vertices and influences.";

    int $i;
    for ($i=0; $i<$vtxsSize; $i++)
    {
      if ($gDazasSkinBalVtxs[$i] != $vtxs[$i]) return 4; //"The data does not match the currently entered vertices and influences.";
      else if  ($gDazasSkinBalInfsL[$i] != $infsL[$i]) return 4; //"The data does not match the currently entered vertices and influences.";
      else if  ($gDazasSkinBalInfsR[$i] != $infsR[$i]) return 4; //"The data does not match the currently entered vertices and influences.";
    }
  }
  return 1;
}

// Clear data.
global proc int dazas_skinBal_clearData ()
{
  global string $gDazasSkinBalskinCluster;

  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];

  global float $gDazasSkinBalInfXPosL[];
  global float $gDazasSkinBalInfXPosR[];

  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];

  global float $gDazasSkinBalIntensity[];
  global float $gDazasSkinBalXDis[];
  global float $gDazasSkinBalMaxDis;
  global float $gDazasSkinBalAtten;

  $gDazasSkinBalskinCluster = "";

  clear($gDazasSkinBalVtxs);
  clear($gDazasSkinBalInfsL);
  clear($gDazasSkinBalWeightsL);
  clear($gDazasSkinBalInfsR);
  clear($gDazasSkinBalWeightsR);

  clear($gDazasSkinBalInfXPosL);
  clear($gDazasSkinBalInfXPosR);

  clear($gDazasSkinBalInfsSmaller);
  clear($gDazasSkinBalWeightsSmaller);
  clear($gDazasSkinBalInfsLarger);
  clear($gDazasSkinBalWeightsLarger);

  clear($gDazasSkinBalIntensity);
  clear($gDazasSkinBalXDis);
  $gDazasSkinBalMaxDis = 0;
  $gDazasSkinBalAtten = 0;

  return 1;
}

// Print data.
global proc int dazas_skinBal_printData ()
{
  global string $gDazasSkinBalskinCluster;

  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];

  global float $gDazasSkinBalInfXPosL[];
  global float $gDazasSkinBalInfXPosR[];

  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];

  global float $gDazasSkinBalIntensity[];
  global float $gDazasSkinBalXDis[];
  global float $gDazasSkinBalMaxDis;
  global float $gDazasSkinBalAtten;

  print("\nThe Skin Cluster is "+$gDazasSkinBalskinCluster+"\n");
  print("\nThe Max Distence is "+$gDazasSkinBalMaxDis+"\n");
  print("\nThe Attenuation is "+$gDazasSkinBalAtten+"\n");

  int $s = size($gDazasSkinBalVtxs);
  int $i;
  for ($i=0; $i<$s; $i++)
  {
    print("\n"+$gDazasSkinBalVtxs[$i]+":\n");
    print("\tLeft --> "+$gDazasSkinBalInfsL[$i]+": "+$gDazasSkinBalWeightsL[$i]+" | X-Position: "+$gDazasSkinBalInfXPosL[$i]+"\n");
    print("\tRight --> "+$gDazasSkinBalInfsR[$i]+": "+$gDazasSkinBalWeightsR[$i]+" | X-Position: "+$gDazasSkinBalInfXPosR[$i]+"\n");
    print("\tSmaller --> "+$gDazasSkinBalInfsSmaller[$i]+": "+$gDazasSkinBalWeightsSmaller[$i]+"\n");
    print("\tLarger --> "+$gDazasSkinBalInfsLarger[$i]+": "+$gDazasSkinBalWeightsLarger[$i]+"\n");
    print("\tIntensity: "+$gDazasSkinBalIntensity[$i]+"\n");
    print("\tX-Distence: "+$gDazasSkinBalXDis[$i]+"\n");
  }
  return 1;
}

// Select data vertices an influence.
global proc int dazas_skinBal_selectData (int $mode, int $vtx, int $inf)
{
  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global string $gDazasSkinBalInfsR[];

  string $modes[] = {"-d", "-add"};

  if ($vtx){
    select($modes[$mode], $gDazasSkinBalVtxs);
  }

  if ($inf) {
    select($modes[$mode], $gDazasSkinBalInfsL);
    select($modes[$mode], $gDazasSkinBalInfsR);
  }
  return 1;
}

// Build data.
global proc int dazas_skinBal_buildData (string $skinCluster, string $vtxs[], string $infsL[], string $infsR[], float $weightL[], float $weightR[], float $intensity[], float $xDis[], float $maxDis, float $atten)
{
  global string $gDazasSkinBalskinCluster;

  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];

  global float $gDazasSkinBalInfXPosL[];
  global float $gDazasSkinBalInfXPosR[];

  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];

  global float $gDazasSkinBalIntensity[];
  global float $gDazasSkinBalXDis[];
  global float $gDazasSkinBalMaxDis;
  global float $gDazasSkinBalAtten;

  int $s = size($vtxs);
  int $i;
  if (!$s)
  {
    //print("No object was selected. Only the 'Maximum Distance' and 'Attenuation Exponential' data is updated.");
    $gDazasSkinBalMaxDis = $maxDis;
    $gDazasSkinBalAtten = $atten;
    int $ss = size($gDazasSkinBalXDis);
    for ($i=0; $i<$ss; $i++)
    {
      $gDazasSkinBalIntensity[$i] = pow(($maxDis-abs($gDazasSkinBalXDis[$i]))/$maxDis, $atten);
    }
  }
  else
  {
    $gDazasSkinBalskinCluster = $skinCluster;

    $gDazasSkinBalVtxs = $vtxs;
    $gDazasSkinBalInfsL = $infsL;
    $gDazasSkinBalWeightsL = $weightL;
    $gDazasSkinBalInfsR = $infsR;
    $gDazasSkinBalWeightsR = $weightR;

    $gDazasSkinBalIntensity = $intensity;
    $gDazasSkinBalXDis = $xDis;
    $gDazasSkinBalMaxDis = $maxDis;
    $gDazasSkinBalAtten = $atten;

    for ($i=0; $i<$s; $i++)
    {
      if ($weightL[$i] < $weightR[$i]) {
        $gDazasSkinBalWeightsSmaller[$i] = $weightL[$i];
        $gDazasSkinBalWeightsLarger[$i] = $weightR[$i];
        $gDazasSkinBalInfsSmaller[$i] = $infsL[$i];
        $gDazasSkinBalInfsLarger[$i] = $infsR[$i];
      } else {
        $gDazasSkinBalWeightsSmaller[$i] = $weightR[$i];
        $gDazasSkinBalWeightsLarger[$i] = $weightL[$i];
        $gDazasSkinBalInfsSmaller[$i] = $infsR[$i];
        $gDazasSkinBalInfsLarger[$i] = $infsL[$i];
      }
      float $infPosL[] = xform("-ws", "-q", "-t", $infsL[$i]);
      float $infPosR[] = xform("-ws", "-q", "-t", $infsR[$i]);
      $gDazasSkinBalInfXPosL[$i] = $infPosL[0];
      $gDazasSkinBalInfXPosR[$i] = $infPosR[0];
    }
  }
  return 1;
}

///////////////////////
//  Data Processing  //
///////////////////////
global proc int dazas_skinBal_dataProc (string $vtxs[], string $infs[], string $skinCluster, int $check, int $build, float $maxDis, float $atten, float $ignoreWeight)
{
  ////////////////////////////////////////////////////////
  ////  Determine the Left and the Right influences.  ////
  ////////////////////////////////////////////////////////

  string $midInfs[], $sidInfs[], $infsL[], $infsR[];
  for ($inf in $infs)
  {
    if (gmatch($inf, "*_[L,R]"))
    {
      string $infName = substring($inf, 1, size($inf)-2);
      if (!stringArrayContains($infName, $sidInfs))
      {
        int $s = size($sidInfs);
        $sidInfs[$s] = $infName;
        $infsL[$s] = $infName + "_L";
        $infsR[$s] = $infName + "_R";
      }
    }
    else if (gmatch($inf, "[l,r][A-Z]*"))
    {
      string $infName = substring($inf, 2, size($inf));
      if (!stringArrayContains($infName, $sidInfs))
      {
        int $s = size($sidInfs);
        $sidInfs[$s] = $infName;
        $infsL[$s] = "l" + $infName;
        $infsR[$s] = "r" + $infName;
      }
    }
    else
    {
      $midInfs[size($midInfs)] = $inf;
    }
  }
  $infs = stringArrayRemove($midInfs, $infs);

  /////////////////////////////////////////////////////////////////////////////
  //  Analyze the vertex positions and determine the vertex weight decay.  ////
  /////////////////////////////////////////////////////////////////////////////

  string $daVtxs[], $daInfsL[], $daInfsR[];
  float $daWeightL[], $daWeightR[], $intensity[], $xDis[];

  global string $gMainProgressBar;  // This is defined on maya startup
  progressBar -edit
    -beginProgress
    -isInterruptable true
    -status "Preparing vertices data..."
    -maxValue (max(1, size($vtxs)*size($infsL)))
    $gMainProgressBar;

  for ($vtx in $vtxs)
  {
    int $s = size($infsL);
    int $i;
    for ($i=0; $i<$s; $i++)
    {
      if(`progressBar -query -isCancelled $gMainProgressBar`)
        break;
      progressBar -edit
        -step 1 $gMainProgressBar;

      float $pos[] = pointPosition($vtx);
      float $xdis = abs($pos[0]);
      if ($xdis > $maxDis) continue;

      float $wl = skinPercent( "-t", $infsL[$i], "-q", $skinCluster, $vtx);
      float $wr = skinPercent( "-t", $infsR[$i], "-q", $skinCluster, $vtx);
      float $wt = $wl + $wr;
      if ($wt <= $ignoreWeight) continue;

      //color( "-rgb", 0, 1, 1, $infsL[$i] );
      //color( "-rgb", 0, 1, 1, $infsR[$i] );

      int $id = size($daVtxs);
      $daVtxs[$id] = $vtx;
      $daInfsL[$id] = $infsL[$i];
      $daInfsR[$id] = $infsR[$i];
      $daWeightL[$id] = $wl;
      $daWeightR[$id] = $wr;

      $intensity[$id] = pow(($maxDis-$xdis)/$maxDis, $atten);
      $xDis[$id] = $pos[0];
    }
  }

  progressBar -edit
    -endProgress
    $gMainProgressBar;

  //////////////////////////////////////
  ////  Checking and building data  ////
  //////////////////////////////////////

  int $result;
  int $checkDataResult;
  string $checkDataInfo[] = {"\nData is empty or data is corrupt. Please select the appropriate vertices and influences to rebuild the data.\n",
                            "\nThe data is healthy.\n",
                            "\nThe Skin Cluster does not exist.\n",
                            "\nThe data does not match the currently entered vertices and influences.\n"};
  if ($check)
  {
    $checkDataResult = dazas_skinBal_checkData($daVtxs, $daInfsL, $daInfsR);
    if ($checkDataResult != 1 && $build)
    {
      print("\nData is invalid or does not match the currently entered vertices and influences. Rebuild the data using the current input data.\n");
      dazas_skinBal_clearData();
      $result = dazas_skinBal_buildData($skinCluster, $daVtxs, $daInfsL, $daInfsR, $daWeightL, $daWeightR, $intensity, $xDis, $maxDis, $atten);
    }
    else if ($checkDataResult != 1)
    {
      $result = 0;
      error($checkDataInfo[$checkDataResult]);
    }
    else
    {
      $result = dazas_skinBal_buildData($skinCluster, $daVtxs, $daInfsL, $daInfsR, $daWeightL, $daWeightR, $intensity, $xDis, $maxDis, $atten);
      //$result = 1;
    }
  }
  else
  {
    if ($build)
    {
      dazas_skinBal_clearData();
      $result = dazas_skinBal_buildData($skinCluster, $daVtxs, $daInfsL, $daInfsR, $daWeightL, $daWeightR, $intensity, $xDis, $maxDis, $atten);
    }
  }

  select $daVtxs;
  return $result;
}

global proc int dazas_skinBal_relative (float $blc)
{
  global string $gDazasSkinBalskinCluster;
  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];
  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];
  global float $gDazasSkinBalIntensity[];
  //global float $gDazasSkinBalXDis[];
  //global float $gDazasSkinBalMaxDis;
  //global float $gDazasSkinBalAtten;

  string $skinCluster = $gDazasSkinBalskinCluster;
  string $vtxs[] = $gDazasSkinBalVtxs;
  string $infsL[] = $gDazasSkinBalInfsL;
  float $weightsL[] = $gDazasSkinBalWeightsL;
  string $infsR[] = $gDazasSkinBalInfsR;
  float $weightsR[] = $gDazasSkinBalWeightsR;
  string $infsSm[] = $gDazasSkinBalInfsSmaller;
  float $weightsSm[] = $gDazasSkinBalWeightsSmaller;
  string $infsLa[] = $gDazasSkinBalInfsLarger;
  float $weightsLa[] = $gDazasSkinBalWeightsLarger;
  float $intensity[] = $gDazasSkinBalIntensity;
  //float $xDis[] = $gDazasSkinBalXDis;
  //float $maxDis = $gDazasSkinBalMaxDis;
  //float $atten = $gDazasSkinBalAtten;

  int $s = size($vtxs);
  int $i;

  global string $gMainProgressBar;  // This is defined on maya startup
  progressBar -edit
    -beginProgress
    -isInterruptable true
    -status "Balancing the vertex weights..."
    -maxValue $s
    $gMainProgressBar;

  for ($i=0; $i<$s; $i++)
  {
    float $halfWeight = 0.5 * ($weightsSm[$i] + $weightsLa[$i]);
    float $transferWeight = ($blc > 0) ? ($halfWeight - $weightsSm[$i]) : $weightsSm[$i];
    $transferWeight *= $intensity[$i] * $blc;
    float $wsm = $weightsSm[$i] + $transferWeight;
    float $wla = $weightsLa[$i] - $transferWeight;
    skinPercent( "-tv", $infsSm[$i], $wsm, "-tv", $infsLa[$i], $wla, $skinCluster, $vtxs[$i] );

    if(`progressBar -query -isCancelled $gMainProgressBar`)
      break;
    progressBar -edit
      -step 1 $gMainProgressBar;
  }

  progressBar -edit
    -endProgress
    $gMainProgressBar;

  return 1;
}

global proc int dazas_skinBal_absolutely (float $blc)
{
  global string $gDazasSkinBalskinCluster;
  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];
  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];
  global float $gDazasSkinBalIntensity[];
  global float $gDazasSkinBalXDis[];
  //global float $gDazasSkinBalMaxDis;
  //global float $gDazasSkinBalAtten;

  string $skinCluster = $gDazasSkinBalskinCluster;
  string $vtxs[] = $gDazasSkinBalVtxs;
  string $infsL[] = $gDazasSkinBalInfsL;
  float $weightsL[] = $gDazasSkinBalWeightsL;
  string $infsR[] = $gDazasSkinBalInfsR;
  float $weightsR[] = $gDazasSkinBalWeightsR;
  string $infsSm[] = $gDazasSkinBalInfsSmaller;
  float $weightsSm[] = $gDazasSkinBalWeightsSmaller;
  string $infsLa[] = $gDazasSkinBalInfsLarger;
  float $weightsLa[] = $gDazasSkinBalWeightsLarger;
  float $intensity[] = $gDazasSkinBalIntensity;
  float $xDis[] = $gDazasSkinBalXDis;
  //float $maxDis = $gDazasSkinBalMaxDis;
  //float $atten = $gDazasSkinBalAtten;

  int $s = size($vtxs);
  int $i;
  float $nmlblc = 1.0-(0.5+0.5*$blc);

  global string $gMainProgressBar;  // This is defined on maya startup
  progressBar -edit
    -beginProgress
    -isInterruptable true
    -status "Balancing the vertex weights..."
    -maxValue $s
    $gMainProgressBar;

  for ($i=0; $i<$s; $i++)
  {
    float $halfWeight = 0.5 * ($weightsL[$i] + $weightsR[$i]);
    float $transferWeight = $halfWeight + sign($xDis[$i]) * $nmlblc * $halfWeight;
    float $wl = (1.0-$intensity[$i]) * $weightsL[$i] + $intensity[$i] * $transferWeight;
    float $wr = 2*$halfWeight - $wl;
    skinPercent( "-tv", $infsL[$i], $wl, "-tv", $infsR[$i], $wr, $skinCluster, $vtxs[$i] );

    if(`progressBar -query -isCancelled $gMainProgressBar`)
      break;
    progressBar -edit
      -step 1 $gMainProgressBar;
  }

  progressBar -edit
    -endProgress
    $gMainProgressBar;

  return 1;
}

global proc int dazas_skinBal_distance ()
{
  global string $gDazasSkinBalskinCluster;
  global string $gDazasSkinBalVtxs[];
  global string $gDazasSkinBalInfsL[];
  global float $gDazasSkinBalWeightsL[];
  global string $gDazasSkinBalInfsR[];
  global float $gDazasSkinBalWeightsR[];
  global float $gDazasSkinBalInfXPosL[];
  global float $gDazasSkinBalInfXPosR[];

  global string $gDazasSkinBalInfsSmaller[];
  global float $gDazasSkinBalWeightsSmaller[];
  global string $gDazasSkinBalInfsLarger[];
  global float $gDazasSkinBalWeightsLarger[];
  global float $gDazasSkinBalIntensity[];
  global float $gDazasSkinBalXDis[];
  //global float $gDazasSkinBalMaxDis;
  //global float $gDazasSkinBalAtten;

  string $skinCluster = $gDazasSkinBalskinCluster;
  string $vtxs[] = $gDazasSkinBalVtxs;
  string $infsL[] = $gDazasSkinBalInfsL;
  float $weightsL[] = $gDazasSkinBalWeightsL;
  string $infsR[] = $gDazasSkinBalInfsR;
  float $weightsR[] = $gDazasSkinBalWeightsR;
  float $infPosL[] = $gDazasSkinBalInfXPosL;
  float $infPosR[] = $gDazasSkinBalInfXPosR;

  string $infsSm[] = $gDazasSkinBalInfsSmaller;
  float $weightsSm[] = $gDazasSkinBalWeightsSmaller;
  string $infsLa[] = $gDazasSkinBalInfsLarger;
  float $weightsLa[] = $gDazasSkinBalWeightsLarger;
  float $intensity[] = $gDazasSkinBalIntensity;
  float $xPos[] = $gDazasSkinBalXDis;
  //float $maxDis = $gDazasSkinBalMaxDis;
  //float $atten = $gDazasSkinBalAtten;

  int $s = size($vtxs);
  int $i;

  global string $gMainProgressBar;  // This is defined on maya startup
  progressBar -edit
    -beginProgress
    -isInterruptable true
    -status "Balancing the vertex weights..."
    -maxValue $s
    $gMainProgressBar;

  for ($i=0; $i<$s; $i++)
  {
    float $dis = $infPosL[$i] - $infPosR[$i];
    float $disVtx = clamp(0, $dis, $xPos[$i]-$infPosR[$i]);

    float $totalWeight = $weightsL[$i] + $weightsR[$i];
    float $wl = (1.0-$intensity[$i]) * $weightsL[$i] + $intensity[$i] * ($disVtx / $dis * $totalWeight);
    float $wr = $totalWeight - $wl;
    skinPercent( "-tv", $infsL[$i], $wl, "-tv", $infsR[$i], $wr, $skinCluster, $vtxs[$i] );

    if(`progressBar -query -isCancelled $gMainProgressBar`)
      break;
    progressBar -edit
      -step 1 $gMainProgressBar;
  }

  progressBar -edit
    -endProgress
    $gMainProgressBar;

  return 1;
}

////////////
//  Main  //
////////////
global proc dazas_balanceSkinWeights (string $vtxs[], string $infs[], string $mode, string $data, float $blc, float $maxDis, float $atten, float $ignoreWeight, int $UI)
{
  if ($UI)
  {
    int $md;
    switch ($mode)
    {
      case "Relative":
      case "rel":
        $md = 1;
        break;
      case "Absolutely":
      case "abs":
        $md = 2;
        break;
      case "Distance":
      case "dis":
        $md = 3;
        break;
      default:
        error ("\nPlease select from the following modes. 'Relative','rel' or 'Absolutely','abs' or 'Distance','dis'.\n");
        break;
    }
    dazas_balanceSkinWeights_UI($md, $blc, $maxDis, $atten, $ignoreWeight);
  }
  else
  {
    int $result;
    /////////////////////////////
    //// Parameter Analysis  ////
    /////////////////////////////

    if ($data == "directlyUse") {
      // Balance vertex weights directly using existing data, without data checking.
    }
    else
    {
      string $skinCluster[];
      int $inputSize = size(ls("-sl")) + size($vtxs) + size($infs);
      if ($inputSize > 0)// || $data == "build")
      {
        //-- Checking Parameters --//

        string $selInfs[] = ls("-sl", "-typ", "transform");
        ConvertSelectionToVertices();
        string $selVtxs[] = ls("-sl", "-typ", "float3", "-fl");

        // Check vtxs.
        if (size($vtxs)==0)
          $vtxs = $selVtxs;
        string $buffer[];
        tokenize($vtxs[0], ".", $buffer);
        if (!gmatch($buffer[1], "vtx\\[*\\]"))
          error ("\nSelect or enter at least one polygon vertex.\n");
        $vtxs = sort($vtxs);
        string $mesh = $buffer[0];
        string $meshShape[] = listRelatives("-s", "-typ", "mesh", $buffer[0]);
        int $meshshapeid = size($meshShape)-1;
        string $upstreamNodes[] = dazas_listUpstream($meshShape[$meshshapeid], {$meshShape[$meshshapeid]}, 0, 20);
        $skinCluster = ls("-typ", "skinCluster", $upstreamNodes);
        if (size($skinCluster)==0)
          error ("\nThe selected or entered vertices are not the skinned object.\n");

        // Check influences.
        if (size($infs)==0)
          $infs = $selInfs;

        string $allInfs[] = skinCluster("-q", "-inf", $skinCluster[0]);
        string $tmpArray[] = stringArrayRemove($infs, $allInfs);
        $infs = stringArrayRemove($tmpArray, $allInfs);

        if (size($infs)==0) {
          $infs = $allInfs; // If no influence is specified, all influences are used.
        }
        $infs = sort($infs);
      }
      else
      {
        //-- Only check the integrity of existing data. --//

        $result = dazas_skinBal_dataProc ({}, {}, "", 1, 0, $maxDis, $atten, $ignoreWeight);
        if (!$result) {
          error("\nThe data is empty or corrupted. Please rebuild the data and run again.\n");
        }
      }

      //-- Building Datas --//

      if ($data == "use" || $data == "build") {
        $result = dazas_skinBal_dataProc ($vtxs, $infs, $skinCluster[0], 1, 1, $maxDis, $atten, $ignoreWeight);
      }
      else {
        error ("\n'"+$data+"' is not the correct type of data parameter.Please choose from types 'use', 'directlyUse' and 'build'.\n");
      }
    }

    //////////////////////////////////
    ////  Balancing skin weights  ////
    //////////////////////////////////
    if ($data != "build")
    {
      switch ($mode)
      {
        case "Relative":
        case "rel":
          dazas_skinBal_relative ($blc);
          break;
        case "Absolutely":
        case "abs":
          dazas_skinBal_absolutely ($blc);
          break;
        case "Distance":
        case "dis":
          dazas_skinBal_distance ();
          break;
        default:
          error ("\nPlease select from the following modes. 'Relative','rel' or 'Absolutely','abs' or 'Distance','dis'.\n");
          break;
      }
    }
  }
}

//////////
//  UI  //
//////////

global proc dazas_skinBal_UI_checkData (string $dataStatusText)
{
  int $checkDataResult = dazas_skinBal_checkData({},{},{});
  string $checkDataInfo[] = {"\nData is empty or data is corrupt.\n",
                            "\nThe data is healthy.\n",
                            "\nThe Skin Cluster does not exist.\n",
                            "\nThe data does not match the currently entered vertices and influences.\n"};
  float $dataStatusBgc[];
  string $dataStatus;
  if ($checkDataResult==1) {
    $dataStatus = "Healthy";
    $dataStatusBgc = {0,1,0};
  } else {
    $dataStatus = "Abnormal";
    $dataStatusBgc = {1,0,0};
  }

  text("-e", "-l",$dataStatus, "-bgc",$dataStatusBgc[0],$dataStatusBgc[1],$dataStatusBgc[2], $dataStatusText);
  print($checkDataInfo[$checkDataResult]);
}

global proc dazas_skinBal_UI_balance (string $dataMode, string $modeRadio, string $balSlider, string $maxDisSlider, string $expSlider, string $ignoredSlider, string $dataStatusText)
{
  string $mode[] = {"rel", "abs", "dis"};
  int $modeId = radioButtonGrp("-q", "-sl", $modeRadio);
  float $bal = floatSliderGrp("-q", "-v", $balSlider);
  float $maxDis  = floatSliderGrp("-q", "-v", $maxDisSlider);
  float $exp =  floatSliderGrp("-q", "-v", $expSlider);
  float $ignored =  floatSliderGrp("-q", "-v", $ignoredSlider);
  dazas_balanceSkinWeights({}, {}, $mode[$modeId-1], $dataMode, $bal, $maxDis, $exp, $ignored, 0);
  if ($dataMode == "build") dazas_skinBal_UI_checkData($dataStatusText);
}

global proc dazas_skinBal_UI_relative (string $balSlider)
{
  dazas_skinBal_relative(floatSliderGrp("-q", "-v", $balSlider));
}

global proc dazas_skinBal_UI_absolutely (string $balSlider)
{
  dazas_skinBal_absolutely(floatSliderGrp("-q", "-v", $balSlider));
}

global proc dazas_skinBal_UI_interactiveCheck_cc (string $checkBox, string $modeRadio, string $balSlider)
{
  int $on = checkBoxGrp("-q", "-v1", $checkBox);
  if ($on)
  {
    string $mode[] = {"rel", "abs", "dis"};
    int $modeId = radioButtonGrp("-q", "-sl", $modeRadio);
    if ($mode[$modeId-1] == "rel")
    {
      string $cmd = "dazas_skinBal_UI_relative(\""+$balSlider+"\");";
      floatSliderGrp("-e", "-cc",$cmd, "-dc",$cmd, $balSlider);
    }
    else if ($mode[$modeId-1] == "abs")
    {
      string $cmd = "dazas_skinBal_UI_absolutely(\""+$balSlider+"\");";
      floatSliderGrp("-e", "-cc",$cmd, "-dc",$cmd, $balSlider);
    }
    else
    {
        floatSliderGrp("-e", "-cc","", "-dc","", $balSlider);
    }
  }
  else
  {
      floatSliderGrp("-e", "-cc","", "-dc","", $balSlider);
  }
}

global proc dazas_balanceSkinWeights_UI (int $mode, float $blc, float $maxDis, float $atten, float $ignoreWeight)
{
  string $dazasSkinBal_UI_win = window("-t", "Skin Balance", "-w", 450, "-h", 250);
    string $dazasSkinBal_UI_form = formLayout("-numberOfDivisions", 100);
      columnLayout("-adj",1,  "-cat","both",0);
        rowLayout("-nc",5, "-cl5","right","center","center","center","center", "-ct5","both","both","both","both","both", "-co5",0,5,0,0,0);
          text("-l","Data Status:", "-w",100);
          string $dazasSkinBal_UI_dataStatusText = text("-l","", "-w",80);
          button("-l","Check", "-w",80, "-c",("dazas_skinBal_UI_checkData(\""+$dazasSkinBal_UI_dataStatusText+"\");"));
          button("-l","Print", "-w",80, "-c","dazas_skinBal_printData();");
          //string $dazasSkinBal_UI_buildButton = button("-l","Build", "-w",80);
          button("-l","Clear", "-w",80, "-c",("dazas_skinBal_clearData(); dazas_skinBal_UI_checkData(\""+$dazasSkinBal_UI_dataStatusText+"\");"));
          setParent ..;
        //radioButtonGrp("-nrb",2,  "-l","Data",  "-la2","Use","Build",  "-sl",1,  "-cw",1,80);
        string $dazasSkinBal_UI_selDataCheck = checkBoxGrp("-l", "Select Data", "-ncb",2, "-la2","Vertices","Influences", "-cw",1,80);
        string $dazasSkinBal_UI_modeRadio = radioButtonGrp("-nrb",3,  "-l","Mode",  "-la3","Relative","Absolutely","Distance",  "-sl",$mode,  "-cw",1,80);
        string $dazasSkinBal_UI_maxDisSlider = floatSliderGrp("-l","Maximum Distance",  "-f",true,  "-cat",3,"right",100, "-pre",3, "-v",$maxDis);
        string $dazasSkinBal_UI_expSlider = floatSliderGrp("-l","Attenuation Exponential",  "-f",true,  "-cat",3,"right",100, "-pre",3, "-v",$atten);
        string $dazasSkinBal_UI_ignoredSlider = floatSliderGrp("-l","Ignore Weight",  "-f",true,  "-cat",3,"right",100, "-pre",3, "-v",$ignoreWeight);
        string $dazasSkinBal_UI_interactiveCheck = checkBoxGrp("-l", "Interactive",  "-ncb",1);
        string $dazasSkinBal_UI_balSlider = floatSliderGrp("-l","Balance",  "-f",true,  "-cat",3,"right",100,  "-min",-1,  "-max",1,  "-pre",3, "-v",$blc);
        text("-l","            Note:", "-al","left", "-en",0, "-fn","boldLabelFont");
        text("-l","                 It is highly recommended to first return the character's", "-al","left", "-en",0, "-fn","obliqueLabelFont");
        text("-l","                 Bind Pose before Create/Update the skin balance data.", "-al","left", "-en",0, "-fn","obliqueLabelFont");
        text("-l","                 After creating the data, you can balance the skin weights", "-al","left", "-en",0, "-fn","obliqueLabelFont");
        text("-l","                 at any pose.", "-al","left", "-en",0, "-fn","obliqueLabelFont");
        setParent ..;
      string $dazasSkinBal_UI_buildButton = button("-l","Create/Update Data");
      string $dazasSkinBal_UI_balanceButton = button("-l","BALANCE");
      string $dazasSkinBal_UI_closeButton = button("-l","Close", "-c",("deleteUI -wnd "+$dazasSkinBal_UI_win+";"));
      setParent ..;

    formLayout("-edit",
      "-an",$dazasSkinBal_UI_buildButton,"top",
      "-af",$dazasSkinBal_UI_buildButton,"left",5,
      "-af",$dazasSkinBal_UI_buildButton,"bottom",5,
      "-ap",$dazasSkinBal_UI_buildButton,"right",5,33,

      "-an",$dazasSkinBal_UI_balanceButton,"top",
      "-ac",$dazasSkinBal_UI_balanceButton,"left",5,$dazasSkinBal_UI_buildButton,
      "-af",$dazasSkinBal_UI_balanceButton,"bottom",5,
      "-ap",$dazasSkinBal_UI_balanceButton,"right",5,67,

      "-an",$dazasSkinBal_UI_closeButton,"top",
      "-ac",$dazasSkinBal_UI_closeButton,"left",5,$dazasSkinBal_UI_balanceButton,
      "-af",$dazasSkinBal_UI_closeButton,"bottom",5,
      "-af",$dazasSkinBal_UI_closeButton,"right",5,
    $dazasSkinBal_UI_form);

    checkBoxGrp("-e",
      "-on1", "dazas_skinBal_selectData(1, 1, 0);",
      "-of1", "dazas_skinBal_selectData(0, 1, 0);",
      "-on2", "dazas_skinBal_selectData(1, 0, 1);",
      "-of2", "dazas_skinBal_selectData(0, 0, 1);",
    $dazasSkinBal_UI_selDataCheck);

    radioButtonGrp("-e",
      "-cc", ("dazas_skinBal_UI_interactiveCheck_cc(\""+
        $dazasSkinBal_UI_interactiveCheck +"\", \"" +
        $dazasSkinBal_UI_modeRadio +"\", \"" +
        $dazasSkinBal_UI_balSlider +"\");"),
    $dazasSkinBal_UI_modeRadio);

    checkBoxGrp("-e",
      "-cc", ("dazas_skinBal_UI_interactiveCheck_cc(\""+
        $dazasSkinBal_UI_interactiveCheck +"\", \"" +
        $dazasSkinBal_UI_modeRadio +"\", \"" +
        $dazasSkinBal_UI_balSlider +"\");"),
    $dazasSkinBal_UI_interactiveCheck);

    button("-e", "-c",("dazas_skinBal_UI_balance(\"build\", \""+
      $dazasSkinBal_UI_modeRadio +"\", \"" +
      $dazasSkinBal_UI_balSlider +"\", \"" +
      $dazasSkinBal_UI_maxDisSlider +"\", \"" +
      $dazasSkinBal_UI_expSlider +"\", \"" +
      $dazasSkinBal_UI_ignoredSlider +"\", \"" +
      $dazasSkinBal_UI_dataStatusText +"\");"), $dazasSkinBal_UI_buildButton);

    button("-e", "-c",("dazas_skinBal_UI_balance(\"use\", \""+
      $dazasSkinBal_UI_modeRadio +"\", \"" +
      $dazasSkinBal_UI_balSlider +"\", \"" +
      $dazasSkinBal_UI_maxDisSlider +"\", \"" +
      $dazasSkinBal_UI_expSlider +"\", \"" +
      $dazasSkinBal_UI_ignoredSlider +"\", \"" +
      $dazasSkinBal_UI_dataStatusText +"\");"), $dazasSkinBal_UI_balanceButton);

    dazas_skinBal_UI_checkData($dazasSkinBal_UI_dataStatusText);

  showWindow($dazasSkinBal_UI_win);
}
