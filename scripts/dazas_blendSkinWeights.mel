// Blend the two sets of skin weights of the vertices according to the given percentage.
/*
Example:
dazas_blendSkinWeights(
    {"Body.vtx[2364]","Body.vtx[2422]","Body.vtx[2334]","Body.vtx[6074]"}, // Vertices
    "Blend", // 'RecordA','reca', 'RecordB','recb', or 'Blend','ble'
    0.5, // Blend Value
    0, // Do not echo skinPercent commands.
    0); // Do not open UI
*/

global string $gDazasBleSkiWei_SkinCluster;
global string $gDazasBleSkiWei_Vtxs[];
global int $gDazasBleSkiWei_VtxsDataPointers_A[];
global int $gDazasBleSkiWei_VtxsDataPointers_B[];
global string $gDazasBleSkiWei_Infs_A[];
global string $gDazasBleSkiWei_Infs_B[];
global float $gDazasBleSkiWei_Weights_A[];
global float $gDazasBleSkiWei_Weights_B[];

//------------------------------------------ Data Tools -----------------------------------------//
// Data checking function with return values in the order of
// Cluster, Vertices, weight A, weight B and Match.
global proc int[] dazas_bleSkiWei_checkData ()
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  int $result_cluster=1, $result_vtx=1, $result_a=1, $result_b=1, $result_match=1;

  //-- Check Skin Cluster --//
  if ($gDazasBleSkiWei_SkinCluster=="") {
    $result_cluster = 0; // The Skin Cluster data is empty.
  } else if (!objExists($gDazasBleSkiWei_SkinCluster)) {
    $result_cluster = -1; // The Skin Cluster does not exist.
  } else {
    $result_cluster = 1;
  }

  //-- Check Vertices --//
  if (!size($gDazasBleSkiWei_Vtxs)) {
    $result_vtx = 0; // The Vertices data is empty.
  } else {
    $result_vtx = 1;
  }

  int $s = size($gDazasBleSkiWei_Vtxs);

  //-- Check Weights A --//
  if (!size($gDazasBleSkiWei_VtxsDataPointers_A)) {
    $result_a = 0; // The Weight A data is empty.
  } else if (size($gDazasBleSkiWei_Vtxs) != size($gDazasBleSkiWei_VtxsDataPointers_A)-1) {
    $result_a = -1; // The number of pointers to data A does not match the number of vertices.
  } else {
    int $i;
    for ($i=0; $i<$s; $i++)
    {
      int $pa = $gDazasBleSkiWei_VtxsDataPointers_A[$i];
      int $pa1 = $gDazasBleSkiWei_VtxsDataPointers_A[$i+1];
      for ($j=$pa; $j<$pa1; $j++)
      {
        if ($gDazasBleSkiWei_Infs_A[$j]=="") {
          $result_a = -2; // Data A is incomplete or corrupted.
          break;
        }
      }
    }
  }

  //-- Check Weights B --//
  if (!size($gDazasBleSkiWei_VtxsDataPointers_B)) {
    $result_b = 0; // The Weight B data is empty.
    } else if (size($gDazasBleSkiWei_Vtxs) != size($gDazasBleSkiWei_VtxsDataPointers_B)-1) {
      $result_a = -1; // The number of pointers to data B does not match the number of vertices.
    } else {
    int $i;
    for ($i=0; $i<$s; $i++)
    {
      int $pb = $gDazasBleSkiWei_VtxsDataPointers_B[$i];
      int $pb1 = $gDazasBleSkiWei_VtxsDataPointers_B[$i+1];
      for ($j=$pb; $j<$pb1; $j++)
      {
        if ($gDazasBleSkiWei_Infs_B[$j]=="") {
          $result_b = -2; // Data B is incomplete or corrupted.
          break;
        }
      }
    }
  }

  //-- Check data matching --//
  if ($result_a==1 && $result_b==1) {
    if (size($gDazasBleSkiWei_Infs_A) != size($gDazasBleSkiWei_Infs_B)) {
      $result_match = -1; // Data A is not the same length as data B.
    } else {
      int $i;
      for ($i=0; $i<$s; $i++)
      {
        int $pa = $gDazasBleSkiWei_VtxsDataPointers_A[$i];
        int $pb = $gDazasBleSkiWei_VtxsDataPointers_B[$i];
        if ($pa != $pb) {
            $result_match = -2; // The two sets of weight data pointers of A and B do not match.
            break;
        } else {
          int $pa1 = $gDazasBleSkiWei_VtxsDataPointers_A[$i+1];
          for ($j=$pa; $j<$pa1; $j++) {
            if ($gDazasBleSkiWei_Infs_B[$j] != $gDazasBleSkiWei_Infs_A[$j]) {
              $result_match = -3; // The Influences data in Data A and B do not match.
              break;
            }
          }
          if (!$result_match) break;
        }
      }
    }
  } else {
    $result_match = 0; // Data A or Data B is incomplete and cannot be matched.
  }

  return {$result_cluster, $result_vtx, $result_a, $result_b, $result_match};
}

// Clear data.
global proc int dazas_bleSkiWei_clearData ()
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  $gDazasBleSkiWei_SkinCluster = "";

  clear($gDazasBleSkiWei_Vtxs);
  clear($gDazasBleSkiWei_VtxsDataPointers_A);
  clear($gDazasBleSkiWei_VtxsDataPointers_B);
  clear($gDazasBleSkiWei_Infs_A);
  clear($gDazasBleSkiWei_Infs_B);

  clear($gDazasBleSkiWei_Weights_A);
  clear($gDazasBleSkiWei_Weights_B);

  return 1;
}

// Select data vertices an influence.
global proc int dazas_bleSkiWei_selectData (int $mode, int $vtx, int $infA, int $infB)
{
  global string $gDazasBleSkiWei_Vtxs[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];

  string $modes[] = {"-d", "-add"};

  if ($vtx){
    select($modes[$mode], $gDazasBleSkiWei_Vtxs);
  }

  if ($infA) {
    select($modes[$mode], $gDazasBleSkiWei_Infs_A);
  }

  if ($infB) {
    select($modes[$mode], $gDazasBleSkiWei_Infs_B);
  }
  return 1;
}

global proc int dazas_bleSkiWei_getVtxDataInfoById (int $i, string $combined_infs[], float $combined_weights_A[], float $combined_weights_B[])
{
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  string $current_infs_B[] = stringArrayGetRange($gDazasBleSkiWei_Infs_B, $gDazasBleSkiWei_VtxsDataPointers_B[$i], $gDazasBleSkiWei_VtxsDataPointers_B[$i+1]);
  float $current_Weights_B[] = floatArrayGetRange($gDazasBleSkiWei_Weights_B, $gDazasBleSkiWei_VtxsDataPointers_B[$i], $gDazasBleSkiWei_VtxsDataPointers_B[$i+1]);

  // Record the weight of the influencs in group A and find the same influencs in group B to record their weight.
  int $p=0, $combined_id=0;
  for ($p=$gDazasBleSkiWei_VtxsDataPointers_A[$i]; $p<$gDazasBleSkiWei_VtxsDataPointers_A[$i+1]; $p++)
  {
    $combined_infs[$combined_id] = $gDazasBleSkiWei_Infs_A[$p];
    $combined_weights_A[$combined_id] = $gDazasBleSkiWei_Weights_A[$p];

    int $current_infs_B_id = stringArrayFind($gDazasBleSkiWei_Infs_A[$p], 0, $current_infs_B);
    if ($current_infs_B_id>-1)
    {
      $combined_weights_B[$combined_id] = $current_Weights_B[$current_infs_B_id];
      floatArrayRemoveAtIndex($current_infs_B_id, $current_Weights_B);
      stringArrayRemoveAtIndex($current_infs_B_id, $current_infs_B);
    }
    else
    {
      $combined_weights_B[$combined_id] = 0.0;
    }
    $combined_id++;
  }

  // Finding the remaining influencs in group B should be inserted in the appropriate place in the combined influencs array.
  // Combine the remaining group B influencs into the combined influencs array.
  int $num_of_remaining_B = size($current_infs_B);
  int $j;
  for ($j=0; $j<$num_of_remaining_B; $j++)
  {
    int $insertPointer = stringArrayFindInsertPointer($current_infs_B[$j], $combined_infs);
    stringArrayInsertAtIndex($insertPointer, $combined_infs, $current_infs_B[$j]);
    floatArrayInsertAtIndex($insertPointer, $combined_weights_A, 0.0);
    floatArrayInsertAtIndex($insertPointer, $combined_weights_B, $current_Weights_B[$j]);
  }

  return 1;
}

global proc int dazas_bleSkiWei_printData ()
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  print("\n//=================================================================//");
  print("\n//------------------- Vertices Skin Weight Data -------------------//");
  print("\nThe Skin Cluster is '"+$gDazasBleSkiWei_SkinCluster+"'.");

  int $s = size($gDazasBleSkiWei_Vtxs);
  int $i;
  for ($i=0; $i<$s; $i++)
  {
    string $combined_infs[];
    float $combined_weights_A[], $combined_weights_B[];

    dazas_bleSkiWei_getVtxDataInfoById($i, $combined_infs, $combined_weights_A, $combined_weights_B);

    print("\n\n"+$gDazasBleSkiWei_Vtxs[$i]);

    int $j, $combined_s = size($combined_infs);
    for ($j=0; $j<$combined_s; $j++)
    {
      string $inf = $combined_infs[$j];
      string $wa = string($combined_weights_A[$j]);
      string $wb = string($combined_weights_B[$j]);
      int $sinf = size($inf), $swa = size($wa), $swb = size($wb);
      for ($l=$sinf; $l<20; $l++) $inf=$inf+" ";
      for ($l=$swa; $l<15; $l++) $wa=$wa+" ";
      for ($l=$swb; $l<15; $l++) $wb=$wb+" ";

      print("\n\t"+$inf+"  A: "+$wa+"  B: "+$wb);
    }
  }
  print("\n//-----------------------------------------------------------------//");
  print("\n//=================================================================//\n");
  return 1;
}

//===============================================================================================//
//----------------------------------- Data Matching Functions -----------------------------------//
//                                                                                               //
global proc float[] floatArrayGetRange (float $list[], int $startPointer, int $endPointer)
{
  int $s = size($list);
  $startPointer=min($s, $startPointer);
  $endPointer=min($s, $endPointer);

  float $newList[];
  int $i, $newid=0;
  for ($i=$startPointer; $i<$endPointer; $i++)
  {
    $newList[$newid] = $list[$i];
    $newid++;
  }
  return $newList;
}

global proc string[] stringArrayGetRange (string $list[], int $startPointer, int $endPointer)
{
  int $s = size($list);
  $startPointer=min($s, $startPointer);
  $endPointer=min($s, $endPointer);

  string $newList[];
  int $i, $newid=0;
  for ($i=$startPointer; $i<$endPointer; $i++)
  {
    $newList[$newid] = $list[$i];
    $newid++;
  }
  return $newList;
}

global proc int stringArrayFindInsertPointer (string $item, string $list[])
{
  int $s = size($list);
  int $i;
  for ($i=0; $i<$s; $i++)
  {
    string $tmp[] = sort({$item, $list[$i]});
    if ($tmp[0] == $item)
      return $i;
  }
  return $s;
}

global proc int dazas_bleSkiWei_matchData ()
{
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  string $matched_Infs[];
  int $matched_Pointer[];
  float $matched_Weights_A[];
  float $matched_Weights_B[];
  $matched_Pointer[0] = 0;

  int $i, $s = size($gDazasBleSkiWei_Vtxs);
  for ($i=0; $i<$s; $i++)
  {
    string $current_infs_B[] = stringArrayGetRange($gDazasBleSkiWei_Infs_B, $gDazasBleSkiWei_VtxsDataPointers_B[$i], $gDazasBleSkiWei_VtxsDataPointers_B[$i+1]);
    float $current_Weights_B[] = floatArrayGetRange($gDazasBleSkiWei_Weights_B, $gDazasBleSkiWei_VtxsDataPointers_B[$i], $gDazasBleSkiWei_VtxsDataPointers_B[$i+1]);

    string $combined_infs[];
    float $combined_weights_A[], $combined_weights_B[];

    // Record the weight of the influencs in group A and find the same influencs in group B to record their weight.
    int $p=0, $combined_id=0;
    for ($p=$gDazasBleSkiWei_VtxsDataPointers_A[$i]; $p<$gDazasBleSkiWei_VtxsDataPointers_A[$i+1]; $p++)
    {
      int $current_infs_B_id = stringArrayFind($gDazasBleSkiWei_Infs_A[$p], 0, $current_infs_B);
      if ($current_infs_B_id>-1)
      {
        if ($gDazasBleSkiWei_Weights_A[$p]!=0 || $current_Weights_B[$current_infs_B_id]!=0)
        {
          $combined_infs[$combined_id] = $gDazasBleSkiWei_Infs_A[$p];
          $combined_weights_A[$combined_id] = $gDazasBleSkiWei_Weights_A[$p];
          $combined_weights_B[$combined_id] = $current_Weights_B[$current_infs_B_id];
          $combined_id++;
        }
        floatArrayRemoveAtIndex($current_infs_B_id, $current_Weights_B);
        stringArrayRemoveAtIndex($current_infs_B_id, $current_infs_B);
      }
      else
      {
        if ($gDazasBleSkiWei_Weights_A[$p]!=0)
        {
          $combined_infs[$combined_id] = $gDazasBleSkiWei_Infs_A[$p];
          $combined_weights_A[$combined_id] = $gDazasBleSkiWei_Weights_A[$p];
          $combined_weights_B[$combined_id] = 0.0;
          $combined_id++;
        }
      }
    }

    // Finding the remaining influencs in group B should be inserted in the appropriate place in the combined influencs array.
    // Combine the remaining group B influencs into the combined influencs array.
    int $num_of_remaining_B = size($current_infs_B);
    int $j;
    for ($j=0; $j<$num_of_remaining_B; $j++)
    {
      if ($current_Weights_B[$j]!=0)
      {
        int $insertPointer = stringArrayFindInsertPointer($current_infs_B[$j], $combined_infs);
        stringArrayInsertAtIndex($insertPointer, $combined_infs, $current_infs_B[$j]);
        floatArrayInsertAtIndex($insertPointer, $combined_weights_A, 0.0);
        floatArrayInsertAtIndex($insertPointer, $combined_weights_B, $current_Weights_B[$j]);
      }
    }

    // Append the Combined data into the Matched data array.
    int $num_of_combined_infs = size($combined_infs);
    int $l, $matched_id;
    for ($l=0; $l<$num_of_combined_infs; $l++)
    {
      $matched_id = size($matched_Infs);
      $matched_Infs[$matched_id] = $combined_infs[$l];
      $matched_Weights_A[$matched_id] = $combined_weights_A[$l];
      $matched_Weights_B[$matched_id] = $combined_weights_B[$l];
    }

    // Matched Pointer
    $matched_Pointer[$i+1] = size($matched_Infs);
  }

  $gDazasBleSkiWei_VtxsDataPointers_A = $matched_Pointer;
  $gDazasBleSkiWei_VtxsDataPointers_B = $matched_Pointer;
  $gDazasBleSkiWei_Infs_A = $matched_Infs;
  $gDazasBleSkiWei_Infs_B = $matched_Infs;
  $gDazasBleSkiWei_Weights_A = $matched_Weights_A;
  $gDazasBleSkiWei_Weights_B = $matched_Weights_B;
  return 1;
}
//                                                                                               //
//-----------------------------------------------------------------------------------------------//
//===============================================================================================//

global proc int dazas_bleSkiWei_removeVerticesData (string $vtxs[])
{
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  int $result = 1;

  // Check vtxs.
  if (size($vtxs)==0)
    $vtxs = sort(ls("-sl", "-typ", "float3", "-fl"));
  string $buffer[];
  tokenize($vtxs[0], ".", $buffer);

  // Check Matching: 0-Cluster, 1-Vertices, 2-weight A, 3-weight B and 4-Match.
  int $checkDataResult[] = dazas_bleSkiWei_checkData();

  if (!gmatch($buffer[1], "vtx\\[*\\]"))
  {
    $result = 0; // No valid vertices are entered.
  }
  else if ($checkDataResult[4] != 1)
  {
    $result = -1; // The two sets of weight data of A and B do not match and the vertex data cannot be removed.
  }
  else
  {
    for ($vtx in $vtxs)
    {
      int $index = stringArrayFind( $vtx, 0, $gDazasBleSkiWei_Vtxs );
      if ($index != -1)
      {
        // Removes the influence object as well as the weight data.
        int $p;
        int $ps=$gDazasBleSkiWei_VtxsDataPointers_A[$index];
        int $pe=$gDazasBleSkiWei_VtxsDataPointers_A[$index+1];
        for ($p=$pe-1; $p>=$ps; $p--)
        {
          floatArrayRemoveAtIndex($p, $gDazasBleSkiWei_Weights_B);
          floatArrayRemoveAtIndex($p, $gDazasBleSkiWei_Weights_A);
          stringArrayRemoveAtIndex($p, $gDazasBleSkiWei_Infs_B);
          stringArrayRemoveAtIndex($p, $gDazasBleSkiWei_Infs_A);
        }

        // Removes the data pointer.
        int $removeLength = $pe-$ps;
        int $i, $s=size($gDazasBleSkiWei_VtxsDataPointers_A);
        for ($i=$index+1; $i<$s; $i++)
        {
          $gDazasBleSkiWei_VtxsDataPointers_B[$i] -= $removeLength;
          $gDazasBleSkiWei_VtxsDataPointers_A[$i] -= $removeLength;
        }
        intArrayRemoveAtIndex($index, $gDazasBleSkiWei_VtxsDataPointers_B);
        intArrayRemoveAtIndex($index, $gDazasBleSkiWei_VtxsDataPointers_A);

        // Removes the Vertex Data.
        stringArrayRemoveAtIndex($index, $gDazasBleSkiWei_Vtxs);

        $result = 1;
      }
    }
  }
  return $result;
}

global proc int dazas_bleSkiWei_recordVertices (string $vtxs[])
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];

  int $result = 1;

  // Check vtxs.
  if (size($vtxs)==0)
    $vtxs = ls("-sl", "-typ", "float3", "-fl");
  string $buffer[];
  tokenize($vtxs[0], ".", $buffer);

  if (!gmatch($buffer[1], "vtx\\[*\\]"))
  {
    $result = 0;
    error("\nNo valid vertices are entered.\n");
  }
  else
  {
    // Return: 0-Cluster, 1-Vertices, 2-weight A, 3-weight B and 4-Match.
    int $cdr[] = dazas_bleSkiWei_checkData();
    if($cdr[2] > 0 || $cdr[3] > 0 || $cdr[4] > 0) {
      string $yesOrNot = confirmDialog("-t","Warning:", "-m","Re-recording the vertices will clear the current data. Are you sure?",
        "-b","Yes", "-b","No", "-db","Yes", "-cb","No", "-ds","No");
      if ($yesOrNot=="Yes")
        dazas_bleSkiWei_clearData();
      else
        return 0;
    }

    string $meshShapes[] = listRelatives("-s", "-typ", "mesh", $buffer[0]);
    string $upstreamNodes[];
    string $mesh;
    for($mesh in $meshShapes)
    {
      $upstreamNodes = stringArrayCatenate($upstreamNodes, dazas_listUpstream($mesh, {$mesh}, 0, 20));
    }
    $skinCluster = ls("-typ", "skinCluster", $upstreamNodes);
    if (size($skinCluster)==0)
    {
      $result = -1;
      error("\nThe selected or entered vertices are not the skinned object.\n");
    }
    else
    {
      $gDazasBleSkiWei_Vtxs = sort($vtxs);
      $gDazasBleSkiWei_SkinCluster = $skinCluster[0];
    }
  }

  return $result;
}

global proc int dazas_bleSkiWei_recordWeights (string $group)
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  string $skinCluster = $gDazasBleSkiWei_SkinCluster;
  string $vtxs[] = $gDazasBleSkiWei_Vtxs;

  string $daInfs_A[], $daInfs_B[];
  float $daWeight_A[], $daWeight_B[];
  int $daPA[], $daPB[];

  string $allInfs[] = sort(skinCluster("-q", "-inf", $skinCluster));
  int $i, $s = size($vtxs);

  switch ($group)
  {
    case "A":
    case "a":
      for ($i=0; $i<$s; $i++)
      {
        string $vtx = $vtxs[$i];
        $daPA[$i] = size($daInfs_A);
        for ($inf in $allInfs)
        {
          float $w = skinPercent( "-t", $inf, "-q", $skinCluster, $vtx);
          if ($w > 0) {
            int $id = size($daInfs_A);
            $daInfs_A[$id] = $inf;
            $daWeight_A[$id] = $w;
          }
        }
      }
      $daPA[$s] = size($daInfs_A);
      $gDazasBleSkiWei_VtxsDataPointers_A = $daPA;
      $gDazasBleSkiWei_Infs_A = $daInfs_A;
      $gDazasBleSkiWei_Weights_A = $daWeight_A;
      break;
    case "B":
    case "b":
      for ($i=0; $i<$s; $i++)
      {
        string $vtx = $vtxs[$i];
        $daPB[$i] = size($daInfs_B);
        for ($inf in $allInfs)
        {
          float $w = skinPercent( "-t", $inf, "-q", $skinCluster, $vtx);
          if ($w > 0) {
            int $id = size($daInfs_B);
            $daInfs_B[$id] = $inf;
            $daWeight_B[$id] = $w;
          }
        }
      }
      $daPB[$s] = size($daInfs_B);
      $gDazasBleSkiWei_VtxsDataPointers_B = $daPB;
      $gDazasBleSkiWei_Infs_B = $daInfs_B;
      $gDazasBleSkiWei_Weights_B = $daWeight_B;
      break;
    default:
      error ("\nPlease select the correct data set from the following parameters. 'A','a' or 'B','b'.\n");
      break;
  }

  // Return: 0-Cluster, 1-Vertices, 2-weight A, 3-weight B and 4-Match.
  int $checkDataResult[] = dazas_bleSkiWei_checkData();
  if ($checkDataResult[4]<0) //The weights of groups A and B are normal but the lengths do not match.
  {
    int $matchResult = dazas_bleSkiWei_matchData();
  }

  return 1;
}

global proc string dazas_bleSkiWei_blendCmds (float $blend)
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  string $cmd = "";
  int $i, $s=size($gDazasBleSkiWei_Vtxs);
  for ($i=0; $i<$s; $i++)
  {
    $cmd = $cmd + "skinPercent(";
    int $startP = $gDazasBleSkiWei_VtxsDataPointers_A[$i];
    int $endP = $gDazasBleSkiWei_VtxsDataPointers_A[$i+1];
    int $p, $id;
    for ($p=$startP; $p<$endP; $p++)
    {
      string $inf = $gDazasBleSkiWei_Infs_A[$p];
      float $w = $gDazasBleSkiWei_Weights_B[$p]*$blend + $gDazasBleSkiWei_Weights_A[$p]*(1-$blend);
      $cmd = $cmd+"\"-tv\", \""+$inf+"\", "+string($w)+", ";
    }
    $cmd = $cmd+"\""+$gDazasBleSkiWei_SkinCluster+"\", \""+$gDazasBleSkiWei_Vtxs[$i]+"\");\n";
  }
  return $cmd;
}

global proc string dazas_bleSkiWei_echoAndBlendCmds (float $blend)
{
  global string $gDazasBleSkiWei_SkinCluster;
  global string $gDazasBleSkiWei_Vtxs[];
  global int $gDazasBleSkiWei_VtxsDataPointers_A[];
  global int $gDazasBleSkiWei_VtxsDataPointers_B[];
  global string $gDazasBleSkiWei_Infs_A[];
  global string $gDazasBleSkiWei_Infs_B[];
  global float $gDazasBleSkiWei_Weights_A[];
  global float $gDazasBleSkiWei_Weights_B[];

  string $cmd = "";
  int $i, $s=size($gDazasBleSkiWei_Vtxs);
  for ($i=0; $i<$s; $i++)
  {
    $cmd = $cmd + "skinPercent(";
    int $startP = $gDazasBleSkiWei_VtxsDataPointers_A[$i];
    int $endP = $gDazasBleSkiWei_VtxsDataPointers_A[$i+1];
    int $p, $id;
    for ($p=$startP; $p<$endP; $p++)
    {
      string $inf = $gDazasBleSkiWei_Infs_A[$p];
      float $w = $gDazasBleSkiWei_Weights_B[$p]*$blend + $gDazasBleSkiWei_Weights_A[$p]*(1-$blend);
      $cmd = $cmd+"\"-tv\", \""+$inf+"\", "+string($w)+", ";
    }
    $cmd = $cmd+"\""+$gDazasBleSkiWei_SkinCluster+"\", \""+$gDazasBleSkiWei_Vtxs[$i]+"\");\n";
  }
  print("\n"+$cmd);
  return $cmd;
}

////////////
//  Main  //
////////////
global proc dazas_blendSkinWeights (string $vtxs[], string $mode, float $blend, int $echo, int $UI)
{
  string $recordVerticesError[] = {"\nNo valid vertices are entered.\n",
    "\nThe selected or entered vertices are not the skinned object.\n"};
  if (!$UI)
  {
    int $checkDataResult[];
    switch ($mode)
    {
      case "RecordA":
      case "ra":
        // Return: 0-Cluster, 1-Vertices, 2-weight A, 3-weight B and 4-Match.
        $checkDataResult = dazas_bleSkiWei_checkData();
        if ($checkDataResult[1] != 1) dazas_bleSkiWei_recordVertices($vtxs);
        dazas_bleSkiWei_recordWeights("A");
        break;
      case "RecordB":
      case "rb":
        // Return: 0-Cluster, 1-Vertices, 2-weight A, 3-weight B and 4-Match.
        $checkDataResult = dazas_bleSkiWei_checkData();
        if ($checkDataResult[1] != 1) dazas_bleSkiWei_recordVertices($vtxs);
        dazas_bleSkiWei_recordWeights("B");
        break;
      case "Blend":
      case "b":
        if ($echo) {eval(dazas_bleSkiWei_echoAndBlendCmds($blend));}
        else {eval(dazas_bleSkiWei_blendCmds($blend));}
        break;
      default:
        error ("\nPlease select from the following modes. 'RecordA','reca', 'RecordB','recb', or 'Blend','ble'.\n");
        break;
    }
  }
  else
  {
    dazas_blendSkinWeights_UI($echo, $blend);
  }
}

//===============================================================================================//
//--------------------------------------------- UI ----------------------------------------------//
//                                                                                               //
global proc dazas_bleSkiWei_UI_refresh (string $clusterStatusText, string $vtxStatusText, string $AStatusText, string $BStatusText, string $matchStatusText)
{
  // Return: 0-Cluster, 1-Vertices, 2-weight A, 3-weight B and 4-Match.
  int $checkDataResult[] = dazas_bleSkiWei_checkData();

  //-- Check Skin Cluster --//
  //
  string $cluster_Status;
  float $cluster_StatusBgc[];
  switch (string($checkDataResult[0]))
  {
    case "0": // The Skin Cluster data is empty.
      print("\nThe Skin Cluster data is empty.\n");
      text("-e", "-l","Empty", "-bgc",1,0,0, $clusterStatusText);
      break;
    case "-1": // The Skin Cluster does not exist.
      print("\nThe Skin Cluster does not exist.\n");
      text("-e", "-l","Not Exist", "-bgc",1,0,0, $clusterStatusText);
      break;
    case "1": // Success.
    print("\nThe Skin Cluster is Valid.\n");
      text("-e", "-l","Valid", "-bgc",0,1,0, $clusterStatusText);
      break;
  }

  //-- Check Vertices --//
  //
  switch (string($checkDataResult[1]))
  {
    case "0": // The Vertices data is empty.
      print("The Vertices data is empty.\n");
      text("-e", "-l","Empty", "-bgc",1,0,0, $vtxStatusText);
      break;
    case "1": // Success.
      print("The Vertices data is Valid.\n");
      text("-e", "-l","Valid", "-bgc",0,1,0, $vtxStatusText);
      break;
  }

  //-- Check Weights A --//
  //
  switch (string($checkDataResult[2]))
  {
    case "0": // The Weight A data is empty.
      print("The Weight A data is empty.\n");
      text("-e", "-l","Empty", "-bgc",1,0,0, $AStatusText);
      break;
    case "-1": // The number of pointers to data A does not match the number of vertices.
      print("The number of pointers to data A does not match the number of vertices.\n");
      text("-e", "-l","Not Match", "-bgc",1,0,0, $AStatusText);
      break;
    case "-2": // Data A is incomplete or corrupted.
      print("The Weight A data is incomplete or corrupted.\n");
      text("-e", "-l","Corrupted", "-bgc",1,0,0, $AStatusText);
      break;
    case "1": // Success.
      print("The Weight A data is Valid.\n");
      text("-e", "-l","Valid", "-bgc",0,1,0, $AStatusText);
      break;
  }

  //-- Check Weights B --//
  //
  switch (string($checkDataResult[3]))
  {
    case "0": // The Weight A data is empty.
      print("The Weight B data is empty.\n");
      text("-e", "-l","Empty", "-bgc",1,0,0, $BStatusText);
      break;
    case "-1": // The number of pointers to data A does not match the number of vertices.
      print("The number of pointers to data B does not match the number of vertices.\n");
      text("-e", "-l","Not Match", "-bgc",1,0,0, $BStatusText);
      break;
    case "-2": // Data A is incomplete or corrupted.
      print("The Weight B data is incomplete or corrupted.\n");
      text("-e", "-l","Corrupted", "-bgc",1,0,0, $BStatusText);
      break;
    case "1": // Success.
      print("The Weight B data is Valid.\n");
      text("-e", "-l","Valid", "-bgc",0,1,0, $BStatusText);
      break;
  }

  //-- Check Match --//
  //
  switch (string($checkDataResult[4]))
  {
    case "0": // Data A or Data B is incomplete and cannot be matched.
      print("Weights A or Weights B is incomplete and cannot be matched.\n");
      text("-e", "-l","Can't", "-bgc",1,0,0, $matchStatusText);
      break;
    case "-1": // Data A is not the same length as data B.
      print("Weights data A is not the same length as Weights data B.\n");
      text("-e", "-l","Length Not Match", "-bgc",1,0,0, $matchStatusText);
      break;
    case "-2": // The two sets of weight data pointers of A and B do not match.
      print("The two sets of weight data pointers of A and B do not match.\n");
      text("-e", "-l","Pointer Not Match", "-bgc",1,0,0, $matchStatusText);
      break;
    case "-3": // The Influences data in Data A and B do not match.
      print("The Influences data in weight data A and B do not match.\n");
      text("-e", "-l","Influence Not Match", "-bgc",1,0,0, $matchStatusText);
      break;
    case "1": // Success.
      print("The two sets of weight data of A and B are matched with each other.\n");
      text("-e", "-l","Matched", "-bgc",0,1,0, $matchStatusText);
      break;
  }
  //text("-e", "-l",$cluster_Status, "-bgc",$cluster_StatusBgc[0],$cluster_StatusBgc[1],$cluster_StatusBgc[2], $dazas_bleSkiWei_UI_vtxStatusText);
}

global proc dazas_bleSkiWei_UI_clearData (string $refresh_cmd)
{
  dazas_bleSkiWei_clearData();
  eval($refresh_cmd);
}

global proc dazas_bleSkiWei_UI_removeSelVtx (string $refresh_cmd)
{
  dazas_bleSkiWei_removeVerticesData({});
  eval($refresh_cmd);
}

global proc dazas_bleSkiWei_UI_pruneWeights (string $pruneSlider)
{
  global string $gDazasBleSkiWei_SkinCluster;

  string $vtxs[] = ls("-sl", "-typ", "float3", "-fl");
  string $buffer[];
  tokenize($vtxs[0], ".", $buffer);
  if (!gmatch($buffer[1], "vtx\\[*\\]"))
  {
    $result = 0;
    error("\nSelect a skin shape or skin shape vertices.\n");
  }
  else
  {
    float $prune = floatSliderGrp("-q", "-v", $pruneSlider);
    skinPercent("-prw",$prune, $gDazasBleSkiWei_SkinCluster, $vtxs);
    print("\nZero the weights that are below "+$prune+" at the following vertices:\n");
    print($vtxs);
  }
}

global proc dazas_bleSkiWei_UI_weightHammer (string $autoRecCheck, string $autoPruneCheck, string $pruneSlider, string $refresh_cmd)
{
  if (checkBoxGrp("-q", "-v1", $autoRecCheck))
  {
    string $vtxs[] = sort(ls("-sl", "-typ", "float3", "-fl"));
    string $buffer[];
    tokenize($vtxs[0], ".", $buffer);

    if (!gmatch($buffer[1], "vtx\\[*\\]"))
    {
      error("\nNo valid vertices are entered.\n");
    }
    else
    {
      dazas_bleSkiWei_clearData();
      dazas_bleSkiWei_recordVertices($vtxs);
      if (checkBoxGrp("-q", "-v1", $autoPruneCheck))
        dazas_bleSkiWei_UI_pruneWeights($pruneSlider);
      dazas_bleSkiWei_recordWeights("A");
      WeightHammer;
      if (checkBoxGrp("-q", "-v1", $autoPruneCheck))
        dazas_bleSkiWei_UI_pruneWeights($pruneSlider);
      dazas_bleSkiWei_recordWeights("B");
      eval($refresh_cmd);
    }
  }
  else
  {
    WeightHammer;
  }
}

global proc dazas_bleSkiWei_UI_recordVertices (string $refresh_cmd)
{
  dazas_bleSkiWei_recordVertices({});
  eval($refresh_cmd);
}

global proc dazas_bleSkiWei_UI_recordA (string $refresh_cmd)
{
  dazas_blendSkinWeights(
    {}, // Vertices
    "ra", // 'RecordA','ra', 'RecordB','rb', or 'Blend','b'
    0.0, // Blend Value
    0, // Do not echo skinPercent commands.
    0); // Do not open UI
  eval($refresh_cmd);
}

global proc dazas_bleSkiWei_UI_recordB (string $refresh_cmd)
{
  dazas_blendSkinWeights(
    {}, // Vertices
    "rb", // 'RecordA','ra', 'RecordB','rb', or 'Blend','b'
    0.0, // Blend Value
    0, // Do not echo skinPercent commands.
    0); // Do not open UI
  eval($refresh_cmd);
}

global proc dazas_bleSkiWei_UI_interactiveCheck_cc (string $interactiveCheck, string $echoCheck, string $bleSlider)
{
  int $echo = checkBoxGrp("-q", "-v1", $echoCheck);
  string $bleCmds[] = {"dazas_bleSkiWei_blendCmds","dazas_bleSkiWei_echoAndBlendCmds"};
  if (checkBoxGrp("-q", "-v1", $interactiveCheck))
  {
    /*floatSliderGrp("-e", "-cc","dazas_bleSkiWei_UI_blend(\""+$bleSlider+"\");",
      "-dc","dazas_bleSkiWei_UI_blend(\""+$bleSlider+"\");",
      $bleSlider);*/
    floatSliderGrp("-e", "-cc","eval("+$bleCmds[$echo]+"(floatSliderGrp(\"-q\", \"-v\", \""+$bleSlider+"\")));",
      "-dc","eval("+$bleCmds[$echo]+"(floatSliderGrp(\"-q\", \"-v\", \""+$bleSlider+"\")));",
      $bleSlider);
  }
  else
  {
    floatSliderGrp("-e", "-cc","", "-dc","", $bleSlider);
  }
}

global proc dazas_bleSkiWei_UI_blend (string $echoCheck, string $bleSlider)
{
  if (checkBoxGrp("-q", "-v1", $echoCheck))
  {
    eval(dazas_bleSkiWei_echoAndBlendCmds(floatSliderGrp("-q", "-v", $bleSlider)));
  }
  else
  {
    eval(dazas_bleSkiWei_blendCmds(floatSliderGrp("-q", "-v", $bleSlider)));
  }
}

global proc dazas_blendSkinWeights_UI (int $echo, float $blend)
{
  string $dazas_bleSkiWei_UI_win = window("-t", "Skin Blend", "-w", 460, "-h", 250);
    string $dazas_bleSkiWei_UI_form = formLayout("-numberOfDivisions", 100);
      string $dazas_bleSkiWei_UI_column = columnLayout("-adj",1,  "-cat","both",0);
        rowLayout("-nc",5);//"-cl3","center","center","center", "-ct3","both","both","both"
          text("-l","Cluster", "-w",80);
          text("-l","Vertex", "-w",100);
          text("-l","Weight A", "-w",100);
          text("-l","Weight B", "-w",100);
          text("-l","Match", "-w",80);
          setParent ..;
        rowLayout("-nc",5);//, "-cl3","center","center","center", "-ct3","both","both","both");
          string $dazas_bleSkiWei_UI_clusterStatusText = text("-l","", "-w",80);
          string $dazas_bleSkiWei_UI_vtxStatusText = text("-l","", "-w",100);
          string $dazas_bleSkiWei_UI_AStatusText = text("-l","", "-w",100);
          string $dazas_bleSkiWei_UI_BStatusText = text("-l","", "-w",100);
          string $dazas_bleSkiWei_UI_matchStatusText = text("-l","", "-w",80);
          setParent ..;
        rowLayout("-nc",5);
          text("-l","", "-w",80);
          string $dazas_bleSkiWei_UI_recordVtxButton = button("-l","Record Vertices", "-w",100);
          string $dazas_bleSkiWei_UI_recordAButton = button("-l","Record A", "-w",100);
          string $dazas_bleSkiWei_UI_recordBButton = button("-l","Record B", "-w",100);
          setParent ..;
        rowLayout("-nc",5);
          text("-l","", "-w",80);
          string $dazas_bleSkiWei_UI_checkButton = button("-l","Check", "-w",70);
          button("-l","Print", "-w",70, "-c","dazas_bleSkiWei_printData();");
          string $dazas_bleSkiWei_UI_clearButton = button("-l","Clear", "-w",68);
          string $dazas_bleSkiWei_UI_removeSelVtxButton = button("-l","Remove Sel Vtx", "-w",90);
          setParent ..;
        string $dazas_bleSkiWei_UI_selDataCheck = checkBoxGrp("-l", "Select", "-ncb",3, "-la3","Vertices","Influences A","Influences B", "-cw4",80,100,100,100);
        separator -style "in" -h 10;
        rowLayout("-nc",2);
          string $dazas_bleSkiWei_UI_interactiveCheck = checkBoxGrp("-l", "Interactive", "-ncb",1);
          string $dazas_bleSkiWei_UI_echoCheck = checkBoxGrp("-l", "Echo Commands", "-ncb",1);
          setParent ..;
        string $dazas_bleSkiWei_UI_bleSlider = floatSliderGrp("-l","Blend", "-f",true, "-cat",3,"right",30, "-min",0, "-max",1, "-pre",3, "-v",$blend);
        separator -style "in" -h 10;
        rowLayout("-nc",5, "-cl5","left","left","left","left","left");
          text("-l","", "-w",80);
          string $dazas_bleSkiWei_UI_hammerButton = iconTextButton("-st","iconOnly", "-i1","weightHammer.png", "-l","Hammer");
          string $dazas_bleSkiWei_UI_hammerAutoRecCheck = checkBoxGrp("-l", "Auto Record", "-ncb",1, "-cw2",80,0);
          string $dazas_bleSkiWei_UI_hammerAutoPruCheck = checkBoxGrp("-l", "Auto Prune", "-ncb",1, "-cw2",80,0);
          setParent ..;
        rowLayout("-nc",5, "-cl5","left","left","left","left","left");
          text("-l","", "-w",80);
          $dazas_bleSkiWei_UI_pruneButton = iconTextButton("-st","iconOnly", "-i1","clearCanvas.png", "-l","Prune");
          $dazas_bleSkiWei_UI_pruneSlider = floatSliderGrp("-l","Prune below:", "-f",1, "-cw3",80,50,100, "-min",0, "-max",1, "-pre",4, "-v",0.01);
          setParent ..;
      setParent ..;
      string $dazas_bleSkiWei_UI_blendButton = button("-l","BLEND");
      string $dazas_bleSkiWei_UI_closeButton = button("-l","Close", "-c",("deleteUI -wnd "+$dazas_bleSkiWei_UI_win+";"));
      setParent ..;

    formLayout("-edit",
      "-af",$dazas_bleSkiWei_UI_column,"top",0,
      "-af",$dazas_bleSkiWei_UI_column,"left",0,
      "-ac",$dazas_bleSkiWei_UI_column,"bottom",0,$dazas_bleSkiWei_UI_blendButton,
      "-af",$dazas_bleSkiWei_UI_column,"right",0,

      "-an",$dazas_bleSkiWei_UI_blendButton,"top",
      "-af",$dazas_bleSkiWei_UI_blendButton,"left",5,
      "-af",$dazas_bleSkiWei_UI_blendButton,"bottom",5,
      "-ap",$dazas_bleSkiWei_UI_blendButton,"right",5,50,

      "-an",$dazas_bleSkiWei_UI_closeButton,"top",
      "-ac",$dazas_bleSkiWei_UI_closeButton,"left",5,$dazas_bleSkiWei_UI_blendButton,
      "-af",$dazas_bleSkiWei_UI_closeButton,"bottom",5,
      "-af",$dazas_bleSkiWei_UI_closeButton,"right",5,
    $dazas_bleSkiWei_UI_form);

  showWindow($dazas_bleSkiWei_UI_win);

  string $dazas_bleSkiWei_UI_refresh_cmd = "dazas_bleSkiWei_UI_refresh(\""+
    $dazas_bleSkiWei_UI_clusterStatusText+"\", \""+
    $dazas_bleSkiWei_UI_vtxStatusText+"\", \""+
    $dazas_bleSkiWei_UI_AStatusText+"\", \""+
    $dazas_bleSkiWei_UI_BStatusText+"\", \""+
    $dazas_bleSkiWei_UI_matchStatusText+"\");";

  eval($dazas_bleSkiWei_UI_refresh_cmd);

  button("-e", "-c","dazas_bleSkiWei_UI_recordVertices(\""+encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_recordVtxButton);

  button("-e", "-c","dazas_bleSkiWei_UI_recordA(\""+encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_recordAButton);

  button("-e", "-c","dazas_bleSkiWei_UI_recordB(\""+encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_recordBButton);

  button("-e", "-c","eval(\""+encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_checkButton);

  button("-e", "-c","dazas_bleSkiWei_UI_removeSelVtx(\""+encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_removeSelVtxButton);

  button("-e", "-c","dazas_bleSkiWei_UI_clearData(\""+encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_clearButton);

  checkBoxGrp("-e",
    "-on1", "dazas_bleSkiWei_selectData(1, 1, 0, 0);",
    "-of1", "dazas_bleSkiWei_selectData(0, 1, 0, 0);",
    "-on2", "dazas_bleSkiWei_selectData(1, 0, 1, 0);",
    "-of2", "dazas_bleSkiWei_selectData(0, 0, 1, 0);",
    "-on3", "dazas_bleSkiWei_selectData(1, 0, 0, 1);",
    "-of3", "dazas_bleSkiWei_selectData(0, 0, 0, 1);",
    $dazas_bleSkiWei_UI_selDataCheck);

  iconTextButton("-e", "-c","dazas_bleSkiWei_UI_weightHammer(\""+
    $dazas_bleSkiWei_UI_hammerAutoRecCheck+"\", \""+
    $dazas_bleSkiWei_UI_hammerAutoPruCheck+"\", \""+
    $dazas_bleSkiWei_UI_pruneSlider+"\", \""+
    encodeString($dazas_bleSkiWei_UI_refresh_cmd)+"\");",
    $dazas_bleSkiWei_UI_hammerButton);

  iconTextButton("-e", "-c","dazas_bleSkiWei_UI_pruneWeights(\""+
    $dazas_bleSkiWei_UI_pruneSlider+"\");",
    $dazas_bleSkiWei_UI_pruneButton);

  checkBoxGrp("-e", "-cc", ("dazas_bleSkiWei_UI_interactiveCheck_cc(\""+
    $dazas_bleSkiWei_UI_interactiveCheck +"\", \""+
    $dazas_bleSkiWei_UI_echoCheck +"\", \"" +
    $dazas_bleSkiWei_UI_bleSlider +"\");"),
    $dazas_bleSkiWei_UI_interactiveCheck);

  checkBoxGrp("-e", "-cc", ("dazas_bleSkiWei_UI_interactiveCheck_cc(\""+
    $dazas_bleSkiWei_UI_interactiveCheck +"\", \""+
    $dazas_bleSkiWei_UI_echoCheck +"\", \"" +
    $dazas_bleSkiWei_UI_bleSlider +"\");"),
    $dazas_bleSkiWei_UI_echoCheck);

  button("-e", "-c","dazas_bleSkiWei_UI_blend(\""+
    $dazas_bleSkiWei_UI_echoCheck +"\", \"" +
    $dazas_bleSkiWei_UI_bleSlider+"\");",
    $dazas_bleSkiWei_UI_blendButton);
}
//                                                                                               //
//-----------------------------------------------------------------------------------------------//
//===============================================================================================//
