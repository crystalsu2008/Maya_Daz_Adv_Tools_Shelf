global proc shelf_Daz_Adv_Tools () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Daz To AdvancedSkeleton Guide" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Daz To AdvancedSkeleton Guide" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Guide" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "render.png" 
        -image1 "render.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/Users/chrissu/Documents/GitHub/Maya_Daz_Adv_Tools_Shelf/scripts/dazToAdvancedSkeletonGuide.mel\";\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 64
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select Very First Original Mesh Nodes." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Select Very First Original Nodes" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "OrigM" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "filtersOn.png" 
        -image1 "filtersOn.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Select Very First Original Mesh Nodes.\n{\n    // List Mesh Upstream Geometry Nodes.\n    proc string[] listUpstream(string $startNode, string $passedNodes[], int $depth, int $maxDepth)\n    {\n        string $plugs[];\n        if(nodeType($startNode) == \"mesh\")\n        {\n            $plugs[0] = $startNode+\".inMesh\";\n        }\n        else\n        {\n            string $plugName[] = listAttr(\"-a\", \"-m\", \"-st\", \"*inputGeometry*\", $startNode);\n            int $s = size($plugName);\n            for($i=0; $i<$s; $i++)\n            {\n                $plugs[$i] = $startNode+\".\"+$plugName[$i];\n            }\n        }\n\n        $sour = stringArrayRemove($passedNodes, stringArrayRemoveDuplicates(listConnections(\"-s\", 1, \"-d\", 0, \"-scn\", 1, \"-sh\", 1, $plugs)));\n        if( size($sour) > 0 )\n        {\n            $passedNodes = stringArrayCatenate($passedNodes, $sour);\n            if( $depth < $maxDepth )\n            {\n                for( $each in $sour )\n                {\n                    $passedNodes = listUpstream($each,$passedNodes,($depth+1),$maxDepth);\n                }\n            }\n        }\n        return $passedNodes;\n    }\n\n    string $selObjShape[] = listRelatives(\"-s\", \"-typ\", \"mesh\", ls(\"-sl\"));\n    string $upstreamNodes[] =  listUpstream($selObjShape[0], {$selObjShape[0]}, 0, 20);\n\n    int $s = size($upstreamNodes);\n    for($i=$s-1; $i>=0; $i--)\n    {\n        if(nodeType($upstreamNodes[$i]) == \"mesh\")\n        {\n            select -r $upstreamNodes[$i];\n            break;\n        }\n    }\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select Vertexs those influences by selected influences.\n Select Influences & Skin Object run this script." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Select Vertexs those influences by selected influences" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "VtxInf" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "showInfluence.png" 
        -image1 "showInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Select Vertexs those influences by selected influences.\n// Select Influences & Skin Object run this script.\n{\n  // List Mesh Upstream Geometry Nodes.\n  proc string[] listUpstream(string $startNode, string $passedNodes[], int $depth, int $maxDepth)\n  {\n      string $plugs[];\n      if(nodeType($startNode) == \"mesh\")\n      {\n          $plugs[0] = $startNode+\".inMesh\";\n      }\n      else\n      {\n          string $plugName[] = listAttr(\"-a\", \"-m\", \"-st\", \"*inputGeometry*\", $startNode);\n          int $s = size($plugName);\n          for($i=0; $i<$s; $i++)\n          {\n              $plugs[$i] = $startNode+\".\"+$plugName[$i];\n          }\n      }\n\n      $sour = stringArrayRemove($passedNodes, stringArrayRemoveDuplicates(listConnections(\"-s\", 1, \"-d\", 0, \"-scn\", 1, \"-sh\", 1, $plugs)));\n      if( size($sour) > 0 )\n      {\n          $passedNodes = stringArrayCatenate($passedNodes, $sour);\n          if( $depth < $maxDepth )\n          {\n              for( $each in $sour )\n              {\n                  $passedNodes = listUpstream($each,$passedNodes,($depth+1),$maxDepth);\n              }\n          }\n      }\n      return $passedNodes;\n  }\n\n  string $selObjs[] = ls(\"-sl\");\n  string $mesh[] = listRelatives(\"-s\", \"-typ\", \"mesh\", $selObjs);\n\n  string $immesh[];\n  for( $each in $mesh )\n    if( getAttr($each+\".intermediateObject\") )\n      $immesh[size($immesh)] = $each;\n  $mesh = stringArrayRemove($immesh, $mesh);\n\n  string $upstreamNodes[] = listUpstream($mesh[0], {$mesh[0]}, 0, 20);\n  string $skinCluster[] = ls(\"-typ\", \"skinCluster\", $upstreamNodes);\n\n  string $allInfs[]= skinCluster(\"-q\", \"-inf\", $skinCluster[0]);\n  string $infs[];\n\n  for( $each in $selObjs )\n    if( stringArrayContains($each, $allInfs) )\n      $infs[size($infs)] = $each;\n\n  ConvertSelectionToVertices();\n  string $allVtx[] = ls(\"-sl\", \"-fl\");\n  select(\"-cl\");\n  string $infVtxs[];\n  for( $inf in $infs )\n  {\n    for( $vtx in $allVtx)\n    {\n      if( skinPercent( \"-t\", $inf, \"-q\", $skinCluster[0], $vtx) > 0 )\n        $infVtxs[size($infVtxs)] = $vtx;\n    }\n    $allVtx = stringArrayRemove($infVtxs, $allVtx);\n  }\n  $infVtxs = stringArrayRemoveDuplicates($infVtxs);\n  select($infVtxs);\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Remove Daz Genesis 8 Charcator's Expression Control Joints.  Select imported Daz Genesis 8 Charcator run this script." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Remove Gen8 Charcator's Expression Joints" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "ReExpJ" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "removeSkinInfluence.png" 
        -image1 "removeSkinInfluence.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Remove Daz Genesis 8 Charcator's Expression Control Joints.\n// Select imported Daz Genesis 8 Charcator run this script.\n{\n    string $lockWeightsInfs[] = {\"neckUpper\", \"hip\", \"abdomenLower\", \"abdomenUpper\",\n        \"chestLower\", \"chestUpper\", \"lCollar\", \"lShldrBend\", \"lShldrTwist\", \"lForearmBend\",\n        \"lForearmTwist\", \"lHand\", \"lCarpal1\", \"lIndex1\", \"lIndex2\", \"lIndex3\", \"lCarpal2\",\n        \"lMid1\", \"lMid2\", \"lMid3\", \"lCarpal3\", \"lRing1\", \"lRing2\", \"lRing3\", \"lCarpal4\",\n        \"lPinky1\", \"lPinky2\", \"lPinky3\", \"lThumb1\", \"lThumb2\", \"lThumb3\",\"neckLower\",\n        \"rCollar\", \"rShldrBend\", \"rShldrTwist\", \"rForearmBend\", \"rForearmTwist\", \"rHand\",\n        \"rCarpal1\", \"rIndex1\", \"rIndex2\", \"rIndex3\", \"rCarpal2\", \"rMid1\", \"rMid2\", \"rMid3\",\n        \"rCarpal3\", \"rRing1\", \"rRing2\", \"rRing3\", \"rCarpal4\", \"rPinky1\", \"rPinky2\", \"rPinky3\",\n        \"rThumb1\", \"rThumb2\", \"rThumb3\", \"lPectoral\", \"rPectoral\", \"pelvis\", \"lThighBend\",\n        \"lThighTwist\", \"lShin\", \"lFoot\", \"lMetatarsals\", \"lToe\", \"lBigToe\", \"lBigToe_2\",\n        \"lSmallToe1\", \"lSmallToe1_2\", \"lSmallToe2\", \"lSmallToe2_2\", \"lSmallToe3\", \"lSmallToe3_2\",\n        \"lSmallToe4\", \"lSmallToe4_2\", \"rThighBend\", \"rThighTwist\", \"rShin\", \"rFoot\", \"rMetatarsals\",\n        \"rToe\", \"rBigToe\", \"rBigToe_2\", \"rSmallToe1\", \"rSmallToe1_2\", \"rSmallToe2\", \"rSmallToe2_2\",\n        \"rSmallToe3\", \"rSmallToe3_2\", \"rSmallToe4\", \"rSmallToe4_2\", \"lEar\", \"rEar\"};\n\n    for( $each in $lockWeightsInfs )\n        setAttr(($each+\".liw\"), 1);\n\n    string $removeInfs[] = {\n        \"upperTeeth\",\n        \"lowerJaw\",\n            \"lowerTeeth\", \"tongue01\", \"tongue02\", \"tongue03\", \"tongue04\",\n            \"lowerFaceRig\", \"lNasolabialLower\", \"rNasolabialLower\", \"lNasolabialMouthCorner\",\n                \"rNasolabialMouthCorner\", \"lLipCorner\", \"lLipLowerOuter\", \"lLipLowerInner\",\n                \"LipLowerMiddle\", \"rLipLowerInner\", \"rLipLowerOuter\", \"rLipCorner\", \"LipBelow\",\n                \"Chin\", \"lCheekLower\", \"rCheekLower\", \"BelowJaw\", \"lJawClench\", \"rJawClench\",\n        \"upperFaceRig\",\n            \"rBrowInner\", \"rBrowMid\", \"rBrowOuter\", \"lBrowInner\", \"lBrowMid\",\n            \"lBrowOuter\", \"CenterBrow\", \"MidNoseBridge\", \"lEyelidInner\", \"lEyelidUpperInner\",\n            \"lEyelidUpper\", \"lEyelidUpperOuter\", \"lEyelidOuter\", \"lEyelidLowerOuter\",\n            \"lEyelidLower\", \"lEyelidLowerInner\", \"rEyelidInner\", \"rEyelidUpperInner\",\n            \"rEyelidUpper\", \"rEyelidUpperOuter\", \"rEyelidOuter\", \"rEyelidLowerOuter\",\n            \"rEyelidLower\", \"rEyelidLowerInner\", \"lSquintInner\", \"lSquintOuter\", \"rSquintInner\",\n            \"rSquintOuter\", \"lCheekUpper\", \"rCheekUpper\", \"Nose\", \"lNostril\", \"rNostril\", \"lLipBelowNose\",\n            \"rLipBelowNose\", \"lLipNasolabialCrease\", \"rLipNasolabialCrease\", \"lNasolabialUpper\",\n            \"rNasolabialUpper\", \"lNasolabialMiddle\", \"rNasolabialMiddle\", \"LipUpperMiddle\",\n            \"lLipUpperOuter\", \"lLipUpperInner\", \"rLipUpperInner\", \"rLipUpperOuter\",\n        \"lEye\",\n        \"rEye\"};\n\n    string $selObjs[] = ls(\"-sl\");\n    string $skinCluster[] = listConnections(\"-t\", \"skinCluster\", listRelatives(\"-s\", \"-typ\", \"mesh\", $selObjs));\n    string $allInfs[]= skinCluster(\"-q\", \"-inf\", $skinCluster);\n\n    ConvertSelectionToVertices();\n    string $allVtx[] = ls(\"-sl\", \"-fl\");\n    select(\"-cl\");\n    for( $inf in $removeInfs )\n    {\n        string $infVtxs[];\n        for( $vtx in $allVtx)\n        {\n            if( skinPercent( \"-t\", $inf, \"-q\", $skinCluster[0], $vtx) > 0 )\n                $infVtxs[size($infVtxs)] = $vtx;\n        }\n        if( size($infVtxs) > 0 )\n        {\n            print(\"Moving '\"+$inf+\"' Weights to 'head'...\\n\");\n            skinPercent( \"-tmw\", $inf, \"-tmw\", \"head\", $skinCluster[0], $infVtxs);\n        }\n    }\n    select($selObjs);\n    RemoveUnusedInfluences();\n    select($removeInfs);\n    select(\"-d\", \"lowerJaw\", \"lEye\",\"rEye\");\n    print(\"All Done! The Genesis 8 expression control joints has been removed. You can now delete the selected influences.\");\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select Source Group and Destance Group run this script." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Connect Sources to Destances" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Connect" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "menuIconConnect.png" 
        -image1 "menuIconConnect.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Connect the 'outMesh' plugs from Source Group's Mesh objects to the 'inMesh' plugs from Destance Group's Mesh objects.\n// Connected by hierarchical order.\n// Select Source Group and Destance Group run this script.\n{\n    // List Mesh Upstream Geometry Nodes.\n    proc string[] listUpstream(string $startNode, string $passedNodes[], int $depth, int $maxDepth)\n    {\n        string $plugs[];\n        if(nodeType($startNode) == \"mesh\")\n        {\n            $plugs[0] = $startNode+\".inMesh\";\n        }\n        else\n        {\n            string $plugName[] = listAttr(\"-a\", \"-m\", \"-st\", \"*inputGeometry*\", $startNode);\n            int $s = size($plugName);\n            for($i=0; $i<$s; $i++)\n            {\n                $plugs[$i] = $startNode+\".\"+$plugName[$i];\n            }\n        }\n\n        $sour = stringArrayRemove($passedNodes, stringArrayRemoveDuplicates(listConnections(\"-s\", 1, \"-d\", 0, \"-scn\", 1, \"-sh\", 1, $plugs)));\n        if( size($sour) > 0 )\n        {\n            $passedNodes = stringArrayCatenate($passedNodes, $sour);\n            if( $depth < $maxDepth )\n            {\n                for( $each in $sour )\n                {\n                    $passedNodes = listUpstream($each,$passedNodes,($depth+1),$maxDepth);\n                }\n            }\n        }\n        return $passedNodes;\n    }\n\n    // Find Very First Original Mesh Nodes.\n    proc string findOriginalMesh(string $mesh)\n    {\n        string $selObjShape[] = listRelatives(\"-s\", \"-typ\", \"mesh\", $mesh);\n        string $upstreamNodes[] =  listUpstream($selObjShape[0], {$selObjShape[0]}, 0, 20);\n\n        string $origMesh = $selObjShape[0];\n        int $s = size($upstreamNodes);\n        for($i=$s-1; $i>=0; $i--)\n        {\n            if(nodeType($upstreamNodes[$i]) == \"mesh\")\n            {\n                $origMesh = $upstreamNodes[$i];\n                break;\n            }\n        }\n        return $origMesh;\n    }\n\n    string $grps[] = ls(\"-sl\");\n    string $sour[] = listRelatives(\"-c\", $grps[0]);\n    string $dest[] = listRelatives(\"-c\", $grps[1]);\n\n    int $s = size($sour);\n    for($i=0; $i<$s; $i++)\n    {\n        string $sourShape[] = listRelatives(\"-s\", \"-typ\", \"mesh\", $sour[$i]);\n        string $destShape = findOriginalMesh($dest[$i]);\n\t\tif($sourShape[0] != $destShape)\n        \tconnectAttr(\"-f\", ($sourShape[0]+\".outMesh\"), ($destShape+\".inMesh\"));\n    }\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 76
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Select Source Group and Destance Group run this script." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Disconnect Sources to Destances" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "Disconnect" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "NEX_cut.png" 
        -image1 "NEX_cut.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Disconnect the 'outMesh' plugs from Source Group's Mesh objects to the 'inMesh' plugs from Destance Group's Mesh objects.\n// Disconnected by hierarchical order.\n// Select Source Group and Destance Group run this script.\n\n{\n    string $grps[] = ls(\"-sl\");\n    string $sour[] = listRelatives(\"-c\", $grps[0]);\n    string $dest[] = listRelatives(\"-c\", $grps[1]);\n    string $sourShapes[];\n    string $destShapes[];\n    \n    int $s = size($sour);\n    for($i=0; $i<$s; $i++)\n    {\n        $sourShapes = listRelatives(\"-s\", \"-typ\", \"mesh\", $sour[$i]);\n        $destShapes = listRelatives(\"-s\", \"-typ\", \"mesh\", $dest[$i]);\n\n        for($eachSour in $sourShapes)\n        {\n            for($eachDest in $destShapes)\n            {\n                string $so = $eachSour + \".outMesh\";\n                string $de = $eachDest + \".inMesh\";\n                if( isConnected(\"-iuc\", $so, $de) )\n                {\n                    disconnectAttr($so, $de);\n\t\t\t\t\tbreak;\n                }\n            }\n        }\n    }\n}" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copies an already set AdvancedSkeleton Face Pre setting from an already bound Character." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Copy AdvancedSkeleton Face Pre Setting" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FacePre" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "BasicHead.png" 
        -image1 "BasicHead.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Copies an already set AdvancedSkeleton Face Pre setting from an already bound Character.\n{\n    global proc string advasFacePreSettingCmd()\n    {\n        string $cmds[]={\"// AdvancedSkeleton Face Pre Cmds.\\n\"};\n        string $cmd;\n        string $selObjs[];\n        string $textFields[] = {\"asFaceMaskTextField\",\n                                \"asFaceFaceTextField\",\n                                \"asFaceAllHeadTextField\",\n                                \"asFaceRightEyeTextField\",\n                                \"asFaceLeftEyeTextField\",\n                                \"asFaceUpperTeethTextField\",\n                                \"asFaceLowerTeethTextField\",\n                                \"asFaceTongueTextField\",\n                                \"asFaceEyebrowTextField\",\n                                \"asFaceEyelashTextField\",\n                                \"asFaceExtrasTextField\"};\n\n        for($txField in $textFields)\n        {\n            eval(\"asSelectFromTextField \"+$txField+\";\");\n            $selObjs =  ls(\"-sl\");\n            if(size($selObjs)>0)\n            {\n                $cmd = \"select -r\";\n                for($each in $selObjs)\n                    $cmd = $cmd+\" \"+$each;\n                $cmd = $cmd+\";\";\n                appendStringArray($cmds, {$cmd}, 1);\n                appendStringArray($cmds, {\"asChooseInput \"+$txField+\";\"}, 1);\n            }\n            select(\"-cl\");\n        }\n\n        string $allCmds = stringArrayToString($cmds, \"\\n\");\n        return $allCmds;\n    }\n\n    proc string asFacePreSetting_refreshButton_Cmd(string $scroll)\n    {\n        string $cmd = \"cmdScrollFieldExecuter(\\\"-edit\\\", \\\"-t\\\", advasFacePreSettingCmd(), \\\"\"+$scroll+\"\\\")\";\n        return $cmd;\n    }\n\n    string $advasFacePreSettingCmd_Window = window(\"-t\", \"AdvancedSkeleton Face Pre Setting Script\");\n        string $advasFacePreSettingCmd_form = formLayout(\"-nd\", 100);\n            string $advasFacePreSettingCmd_refreshButton = button(\"-l\", \"Refresh\");\n            string $advasFacePreSettingCmd_executeButton = button(\"-l\", \"Execute\");\n            string $advasFacePreSettingCmd_Scroll = cmdScrollFieldExecuter(\"-t\", advasFacePreSettingCmd());\n\n        formLayout -edit\n            -attachForm     $advasFacePreSettingCmd_Scroll         \"top\"    5\n            -attachForm     $advasFacePreSettingCmd_Scroll         \"left\"   5\n            -attachForm     $advasFacePreSettingCmd_Scroll         \"right\"  5\n            -attachControl  $advasFacePreSettingCmd_Scroll         \"bottom\" 5 $advasFacePreSettingCmd_refreshButton\n\n            -attachNone     $advasFacePreSettingCmd_refreshButton     \"top\"\n            -attachForm     $advasFacePreSettingCmd_refreshButton     \"left\"   5\n            -attachPosition $advasFacePreSettingCmd_refreshButton     \"right\"  5 50\n            -attachForm     $advasFacePreSettingCmd_refreshButton     \"bottom\" 5\n\n            -attachNone     $advasFacePreSettingCmd_executeButton   \"top\"\n            -attachPosition $advasFacePreSettingCmd_executeButton   \"left\"   5 50\n            -attachForm     $advasFacePreSettingCmd_executeButton   \"right\"  5\n            -attachForm     $advasFacePreSettingCmd_executeButton   \"bottom\" 5\n        $advasFacePreSettingCmd_form;\n\n        button(\"-edit\",\n            \"-c\", asFacePreSetting_refreshButton_Cmd($advasFacePreSettingCmd_Scroll),\n        $advasFacePreSettingCmd_refreshButton);\n\n        button(\"-edit\",\n            \"-c\", \"cmdScrollFieldExecuter(\\\"-edit\\\", \\\"-exc\\\", \\\"\"+$advasFacePreSettingCmd_Scroll+\"\\\")\",\n        $advasFacePreSettingCmd_executeButton);\n\n    showWindow;\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Copies an already set AdvancedSkeleton Face Fit setting from an already bound Character." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Copy AdvancedSkeleton Face Fit Setting" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "FaceFit" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "BasicHead.png" 
        -image1 "BasicHead.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "// Copies an already set AdvancedSkeleton Face Fit setting from an already bound Character.\n{\nproc string copyAdvFaceFitEyeBallAttrs( string $obj )\n{\n    float $t[] = getAttr($obj+\".t\");\n    float $r[] = getAttr($obj+\".r\");\n    float $s[] = getAttr($obj+\".s\");\n\n    string $cmd = \"setAttr \"+$obj+\".t \"+string($t[0])+\" \"+string($t[1])+\" \"+string($t[2])+\";\\n\";\n    $cmd = $cmd + \"setAttr \"+$obj+\".rx \"+string($r[0])+\";\\n\";\n    $cmd = $cmd + \"setAttr \"+$obj+\".ry \"+string($r[1])+\";\\n\";\n    $cmd = $cmd + \"setAttr \"+$obj+\".s \"+string($s[0])+\" \"+string($s[1])+\" \"+string($s[2])+\";\\n\";\n\n    return $cmd;\n}\n\nproc string copyAdvFaceFitTongueAttrs( string $obj )\n{\n    float $t[] = getAttr($obj+\".t\");\n    float $r[] = getAttr($obj+\".r\");\n    float $s[] = getAttr($obj+\".s\");\n\n    string $cmd = \"setAttr \"+$obj+\".t \"+string($t[0])+\" \"+string($t[1])+\" \"+string($t[2])+\";\\n\";\n    $cmd = $cmd + \"setAttr \"+$obj+\".r \"+string($r[0])+\" \"+string($r[1])+\" \"+string($r[2])+\";\\n\";\n    $cmd = $cmd + \"setAttr \"+$obj+\".s \"+string($s[0])+\" \"+string($s[1])+\" \"+string($s[2])+\";\\n\";\n\n    return $cmd;\n}\n\nglobal proc string advasFaceFitSettingCmd()\n{\n    string $cmds[] = {\"// AdvancedSkeleton Face Fit Cmds.\\n\"};\n    string $cmd;\n\n    // EyeBall\n    appendStringArray($cmds, {\"\\nasCreateFaceFit EyeBall \\\"\\\" 0 0 1 \\\"\\\";\"}, 1);\n    appendStringArray($cmds, {copyAdvFaceFitEyeBallAttrs( \"FitEyeBall\" )}, 1);\n\n    string $selObjs[];\n    string $selectTxFields[] = {\"EyeLid \\\"Outer\\\";\",\n                                \"EyeLid \\\"Main\\\";\",\n                                \"EyeLid \\\"Inner\\\";\",\n                                \"Lip \\\"Outer\\\";\",\n                                \"Lip \\\"Main\\\";\",\n                                \"Lip \\\"Inner\\\";\",\n                                \"EyeBrowInner \\\"\\\";\",\n                                \"EyeBrowOuter \\\"\\\";\",\n                                \"EyeBrowCenter \\\"\\\";\",\n                                \"EyeBrowMid1 \\\"\\\";\",\n                                \"EyeBrowMid2 \\\"\\\";\",\n                                \"EyeBrowMid3 \\\"\\\";\",\n                                \"ForeHead \\\"\\\";\",\n                                \"JawPivot \\\"\\\";\",\n                                \"JawCorner \\\"\\\";\",\n                                \"Jaw \\\"\\\";\",\n                                \"Throat \\\"\\\";\",\n                                \"Cheek \\\"\\\";\",\n                                \"CheekBone \\\"\\\";\",\n                                \"CheekRaiser \\\"\\\";\",\n                                \"SmileBulge \\\"\\\";\",\n                                \"FrownBulge \\\"\\\";\",\n                                \"Nose \\\"\\\";\",\n                                \"NoseUnder \\\"\\\";\",\n                                \"NoseCorner \\\"\\\";\",\n                                \"NoseSide \\\"\\\";\",\n                                \"NoseCenter \\\"\\\";\",\n                                \"Nostril \\\"\\\";\",\n                                \"Pupil \\\"\\\";\",\n                                \"Iris \\\"\\\";\",\n                                \"SmileLine \\\"\\\";\"};\n\n    string $createTxFields[] = {\"EyeLid \\\"Outer\\\" 1 1 0 \\\"\\\";\",\n                                \"EyeLid \\\"Main\\\" 1 1 0 \\\"\\\";\",\n                                \"EyeLid \\\"Inner\\\" 1 1 0 \\\"\\\";\",\n                                \"Lip \\\"Outer\\\" 1 1 0 \\\"\\\";\",\n                                \"Lip \\\"Main\\\" 1 1 0 \\\"\\\";\",\n                                \"Lip \\\"Inner\\\" 1 1 0 \\\"\\\";\",\n                                \"EyeBrowInner \\\"\\\" 0 0 1 \\\"asGreenSG\\\";\",\n                                \"EyeBrowOuter \\\"\\\" 0 0 1 \\\"asRedSG\\\";\",\n                                \"EyeBrowCenter \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"EyeBrowMid1 \\\"\\\" 0 0 1 \\\"asRedSG\\\";\",\n                                \"EyeBrowMid2 \\\"\\\" 0 0 1 \\\"asRedSG\\\";\",\n                                \"EyeBrowMid3 \\\"\\\" 0 0 1 \\\"asRedSG\\\";\",\n                                \"ForeHead \\\"\\\" 0 0 0 \\\"\\\";\",\n                                \"JawPivot \\\"\\\" 0 0 1 \\\"asBlue2SG\\\";\",\n                                \"JawCorner \\\"\\\" 0 0 1 \\\"asBlue2SG\\\";\",\n                                \"Jaw \\\"\\\" 0 0 1 \\\"asBlue2SG\\\";\",\n                                \"Throat \\\"\\\" 0 0 1 \\\"asBlue2SG\\\";\",\n                                \"Cheek \\\"\\\" 0 0 1 \\\"asGreenSG\\\";\",\n                                \"CheekBone \\\"\\\" 0 0 1 \\\"asBlue2SG\\\";\",\n                                \"CheekRaiser \\\"\\\" 0 0 1 \\\"asRedSG\\\";\",\n                                \"SmileBulge \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"FrownBulge \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"Nose \\\"\\\" 0 0 1 \\\"asGreenSG\\\";\",\n                                \"NoseUnder \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"NoseCorner \\\"\\\" 0 0 1 \\\"asRedSG\\\";\",\n                                \"NoseSide \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"NoseCenter \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"Nostril \\\"\\\" 0 0 1 \\\"asBlueSG\\\";\",\n                                \"Pupil \\\"\\\" 0 0 0 \\\"asRedSG\\\";\",\n                                \"Iris \\\"\\\" 0 0 0 \\\"asGreenSG\\\";\",\n                                \"SmileLine \\\"\\\" 0 0 0 \\\"asRedSG\\\";\"};\n\n    int $s = size($selectTxFields);\n    for($i=0;$i<$s;$i++)\n    {\n        eval(\"asFaceFitReSelect \"+$selectTxFields[$i]);\n        $selObjs = ls(\"-sl\");\n        if(size($selObjs)>0)\n        {\n            $cmd = \"select -r\";\n            for($each in $selObjs)\n                $cmd = $cmd+\" \"+$each;\n            $cmd = $cmd+\";\";\n            appendStringArray($cmds, {$cmd}, 1);\n            appendStringArray($cmds, {\"asCreateFaceFit \"+$createTxFields[$i]}, 1);\n        }\n        select(\"-cl\");\n    }\n\n    // Tongue\n    appendStringArray($cmds, {\"\\nasCreateFaceFit Tongue \\\"\\\" 0 0 0 \\\"asBlueSG\\\";\"}, 1);\n    appendStringArray($cmds, {copyAdvFaceFitEyeBallAttrs( \"Tongue0\" )}, 1);\n    appendStringArray($cmds, {copyAdvFaceFitEyeBallAttrs( \"Tongue1\" )}, 1);\n    appendStringArray($cmds, {copyAdvFaceFitEyeBallAttrs( \"Tongue2\" )}, 1);\n    appendStringArray($cmds, {copyAdvFaceFitEyeBallAttrs( \"Tongue3\" )}, 1);\n    appendStringArray($cmds, {copyAdvFaceFitEyeBallAttrs( \"Tongue4\" )}, 1);\n\n    appendStringArray($cmds, {\"\\nasCreateFaceFit UpMidLo \\\"\\\" 0 0 0 \\\"asGreenSG\\\";\"}, 1);\n\n    string $allCmds = stringArrayToString($cmds, \"\\n\");\n    return $allCmds;\n}\n\nproc string asFaceFitSetting_refreshButton_Cmd(string $scroll)\n{\n    string $cmd = \"cmdScrollFieldExecuter(\\\"-edit\\\", \\\"-t\\\", advasFaceFitSettingCmd(), \\\"\"+$scroll+\"\\\")\";\n    return $cmd;\n}\n\nstring $advasFaceFitSettingCmd_Window = window(\"-t\", \"AdvancedSkeleton Face Fit Setting Script\");\n    string $advasFaceFitSettingCmd_form = formLayout(\"-nd\", 100);\n        string $advasFaceFitSettingCmd_refreshButton = button(\"-l\", \"Refresh\");\n        string $advasFaceFitSettingCmd_executeButton = button(\"-l\", \"Execute\");\n        string $advasFaceFitSettingCmd_Scroll = cmdScrollFieldExecuter(\"-t\", advasFaceFitSettingCmd());\n\n    formLayout -edit\n        -attachForm     $advasFaceFitSettingCmd_Scroll         \"top\"    5\n        -attachForm     $advasFaceFitSettingCmd_Scroll         \"left\"   5\n        -attachForm     $advasFaceFitSettingCmd_Scroll         \"right\"  5\n        -attachControl  $advasFaceFitSettingCmd_Scroll         \"bottom\" 5 $advasFaceFitSettingCmd_refreshButton\n\n        -attachNone     $advasFaceFitSettingCmd_refreshButton     \"top\"\n        -attachForm     $advasFaceFitSettingCmd_refreshButton     \"left\"   5\n        -attachPosition $advasFaceFitSettingCmd_refreshButton     \"right\"  5 50\n        -attachForm     $advasFaceFitSettingCmd_refreshButton     \"bottom\" 5\n\n        -attachNone     $advasFaceFitSettingCmd_executeButton   \"top\"\n        -attachPosition $advasFaceFitSettingCmd_executeButton   \"left\"   5 50\n        -attachForm     $advasFaceFitSettingCmd_executeButton   \"right\"  5\n        -attachForm     $advasFaceFitSettingCmd_executeButton   \"bottom\" 5\n    $advasFaceFitSettingCmd_form;\n\n    button(\"-edit\",\n        \"-c\", asFaceFitSetting_refreshButton_Cmd($advasFaceFitSettingCmd_Scroll),\n    $advasFaceFitSettingCmd_refreshButton);\n\n    button(\"-edit\",\n        \"-c\", \"cmdScrollFieldExecuter(\\\"-edit\\\", \\\"-exc\\\", \\\"\"+$advasFaceFitSettingCmd_Scroll+\"\\\")\",\n    $advasFaceFitSettingCmd_executeButton);\n\nshowWindow;\n}\n" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 64
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Set Genesis 8 Character From Bind Pose to T-Pose. Go to Bind Pose then run this script." 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Set Genesis 8 Character From Bind Pose to T-Pose" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -imageOverlayLabel "T-Pose" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "goToBindPose.png" 
        -image1 "goToBindPose.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "//Set Genesis 8 Character From Bind Pose to T-Pose.\n\nsetAttr \"lShldrBend.rotateZ\" 45;\nsetAttr \"rShldrBend.rotateZ\" -45;\n\nsetAttr \"lCollar.rotateZ\" 2.5;\nsetAttr \"rCollar.rotateZ\" -2.5;\n\nsetAttr \"lThighBend.rotateZ\" -15;\nsetAttr \"rThighBend.rotateZ\" 15;\n\nsetAttr \"lThighTwist.rotateY\" -10;\nsetAttr \"rThighTwist.rotateY\" 10;\n\nsetAttr \"lFoot.rotateY\" -8.5;\nsetAttr \"rFoot.rotateY\" 8.5;\n\nsetAttr \"lFoot.rotateZ\" 20;\nsetAttr \"rFoot.rotateZ\" -20;" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -flexibleWidthType 3
        -flexibleWidthValue 32
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "source \"/Users/chrissu/Documents/GitHub/Maya_Daz_Adv_Tools_Shelf/scripts/bak/checkHeadWeights.mel\";" 
        -enableBackground 0
        -backgroundColor 0 0 0 
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "source \"/Users/chrissu/Documents/GitHub/Maya_Daz_Adv_Tools_Shelf..." 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "commandButton.png" 
        -image1 "commandButton.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "source \"/Users/chrissu/Documents/GitHub/Maya_Daz_Adv_Tools_Shelf/scripts/bak/checkAndHammerGen8HeadWeights.mel\";" 
        -sourceType "mel" 
        -commandRepeatable 1
        -flat 1
    ;

} 
